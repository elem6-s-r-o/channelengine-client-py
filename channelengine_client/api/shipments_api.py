# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants  # noqa: E501

    OpenAPI spec version: 2.17.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from channelengine_client.api_client import ApiClient


class ShipmentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def shipment_create(self, **kwargs):  # noqa: E501
        """Creates shipments  # noqa: E501

        Marks an order as fully or partially shipped, based on the order line and quantity input.<br />Indicate the **Stock location ID** if you make use of multiple stock locations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipment_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MerchantShipmentRequest body:
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shipment_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.shipment_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def shipment_create_with_http_info(self, **kwargs):  # noqa: E501
        """Creates shipments  # noqa: E501

        Marks an order as fully or partially shipped, based on the order line and quantity input.<br />Indicate the **Stock location ID** if you make use of multiple stock locations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipment_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MerchantShipmentRequest body:
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shipment_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/shipments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shipment_create_for_channel_method(self, **kwargs):  # noqa: E501
        """Creates a shipment and initiates shipping label generation  # noqa: E501

        Marks an order as either fully or partially shipped, based on the order line and quantity input.<br />It also provides the marketplace with information necessary to generate a shipping label.<br />If you make use of multiple stock locations, indicate the **Stock location ID**.<br /> <br />**NB:** to request a shipping label, include information on the package size (i.e.: dimensions and weight).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipment_create_for_channel_method(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MerchantChannelLabelShipmentRequest body: The shipment to create
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shipment_create_for_channel_method_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.shipment_create_for_channel_method_with_http_info(**kwargs)  # noqa: E501
            return data

    def shipment_create_for_channel_method_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a shipment and initiates shipping label generation  # noqa: E501

        Marks an order as either fully or partially shipped, based on the order line and quantity input.<br />It also provides the marketplace with information necessary to generate a shipping label.<br />If you make use of multiple stock locations, indicate the **Stock location ID**.<br /> <br />**NB:** to request a shipping label, include information on the package size (i.e.: dimensions and weight).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipment_create_for_channel_method_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MerchantChannelLabelShipmentRequest body: The shipment to create
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shipment_create_for_channel_method" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/shipments/channelmethod', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shipment_get_shipment_label_carriers(self, merchant_order_no, **kwargs):  # noqa: E501
        """Gets carriers providing shipping labels  # noqa: E501

        Posts a request to get the available marketplace carrier offers.<br /><br />**NB:** this endpoint is used to buy a shipping label through the marketplace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipment_get_shipment_label_carriers(merchant_order_no, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str merchant_order_no: The merchant's order reference. (required)
        :param MerchantShipmentLabelCarrierRequest body: The parcel information
        :return: CollectionOfMerchantShipmentLabelCarrierResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shipment_get_shipment_label_carriers_with_http_info(merchant_order_no, **kwargs)  # noqa: E501
        else:
            (data) = self.shipment_get_shipment_label_carriers_with_http_info(merchant_order_no, **kwargs)  # noqa: E501
            return data

    def shipment_get_shipment_label_carriers_with_http_info(self, merchant_order_no, **kwargs):  # noqa: E501
        """Gets carriers providing shipping labels  # noqa: E501

        Posts a request to get the available marketplace carrier offers.<br /><br />**NB:** this endpoint is used to buy a shipping label through the marketplace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipment_get_shipment_label_carriers_with_http_info(merchant_order_no, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str merchant_order_no: The merchant's order reference. (required)
        :param MerchantShipmentLabelCarrierRequest body: The parcel information
        :return: CollectionOfMerchantShipmentLabelCarrierResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['merchant_order_no', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shipment_get_shipment_label_carriers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'merchant_order_no' is set
        if ('merchant_order_no' not in params or
                params['merchant_order_no'] is None):
            raise ValueError("Missing the required parameter `merchant_order_no` when calling `shipment_get_shipment_label_carriers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'merchant_order_no' in params:
            path_params['merchantOrderNo'] = params['merchant_order_no']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/carriers/{merchantOrderNo}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionOfMerchantShipmentLabelCarrierResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shipment_index(self, **kwargs):  # noqa: E501
        """Gets shipments by filter  # noqa: E501

        Gets the shipments based on the available filters.<br />Shipments are listed in chronological order, from old to new.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipment_index(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] merchant_shipment_nos: Filter on the unique references (ids) as used by the merchant.
        :param list[str] merchant_order_nos: Filter on the unique references (ids) of order as used by the merchant.
        :param str method: Filter on the shipping method.
        :param list[str] shipped_from_country_codes: 2-digit Country code
        :param datetime from_shipment_date: Filter on the shipment date, starting from this date. This date is inclusive.
        :param datetime to_shipment_date: Filter on the shipment date, until this date. This date is exclusive.
        :param datetime from_create_date: Filter on the create date of the shipment in ChannelEngine, starting from this date. This date is inclusive.
        :param datetime to_create_date: Filter on the create date of the shipment in ChannelEngine, until this date. This date is exclusive.
        :param datetime from_update_date: Filter on the update date of the shipment in ChannelEngine, starting from this date. This date is inclusive.
        :param datetime to_update_date: Filter on the update date of the shipment in ChannelEngine, until this date. This date is exclusive.
        :param ShipmentFulfillmentType fulfillment_type: Filter on the fulfillment type of the shipment.
        :param list[str] channel_shipment_nos: Filter on the unique references (ids) as used by the channel.
        :param list[str] channel_order_nos: Filter on the unique references (ids) of order as used by the channel.
        :param int page: The page to filter on. Starts at 1.
        :return: CollectionOfMerchantShipmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shipment_index_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.shipment_index_with_http_info(**kwargs)  # noqa: E501
            return data

    def shipment_index_with_http_info(self, **kwargs):  # noqa: E501
        """Gets shipments by filter  # noqa: E501

        Gets the shipments based on the available filters.<br />Shipments are listed in chronological order, from old to new.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipment_index_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] merchant_shipment_nos: Filter on the unique references (ids) as used by the merchant.
        :param list[str] merchant_order_nos: Filter on the unique references (ids) of order as used by the merchant.
        :param str method: Filter on the shipping method.
        :param list[str] shipped_from_country_codes: 2-digit Country code
        :param datetime from_shipment_date: Filter on the shipment date, starting from this date. This date is inclusive.
        :param datetime to_shipment_date: Filter on the shipment date, until this date. This date is exclusive.
        :param datetime from_create_date: Filter on the create date of the shipment in ChannelEngine, starting from this date. This date is inclusive.
        :param datetime to_create_date: Filter on the create date of the shipment in ChannelEngine, until this date. This date is exclusive.
        :param datetime from_update_date: Filter on the update date of the shipment in ChannelEngine, starting from this date. This date is inclusive.
        :param datetime to_update_date: Filter on the update date of the shipment in ChannelEngine, until this date. This date is exclusive.
        :param ShipmentFulfillmentType fulfillment_type: Filter on the fulfillment type of the shipment.
        :param list[str] channel_shipment_nos: Filter on the unique references (ids) as used by the channel.
        :param list[str] channel_order_nos: Filter on the unique references (ids) of order as used by the channel.
        :param int page: The page to filter on. Starts at 1.
        :return: CollectionOfMerchantShipmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['merchant_shipment_nos', 'merchant_order_nos', 'method', 'shipped_from_country_codes', 'from_shipment_date', 'to_shipment_date', 'from_create_date', 'to_create_date', 'from_update_date', 'to_update_date', 'fulfillment_type', 'channel_shipment_nos', 'channel_order_nos', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shipment_index" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'merchant_shipment_nos' in params:
            query_params.append(('merchantShipmentNos', params['merchant_shipment_nos']))  # noqa: E501
            collection_formats['merchantShipmentNos'] = 'multi'  # noqa: E501
        if 'merchant_order_nos' in params:
            query_params.append(('merchantOrderNos', params['merchant_order_nos']))  # noqa: E501
            collection_formats['merchantOrderNos'] = 'multi'  # noqa: E501
        if 'method' in params:
            query_params.append(('method', params['method']))  # noqa: E501
        if 'shipped_from_country_codes' in params:
            query_params.append(('shippedFromCountryCodes', params['shipped_from_country_codes']))  # noqa: E501
            collection_formats['shippedFromCountryCodes'] = 'multi'  # noqa: E501
        if 'from_shipment_date' in params:
            query_params.append(('fromShipmentDate', params['from_shipment_date']))  # noqa: E501
        if 'to_shipment_date' in params:
            query_params.append(('toShipmentDate', params['to_shipment_date']))  # noqa: E501
        if 'from_create_date' in params:
            query_params.append(('fromCreateDate', params['from_create_date']))  # noqa: E501
        if 'to_create_date' in params:
            query_params.append(('toCreateDate', params['to_create_date']))  # noqa: E501
        if 'from_update_date' in params:
            query_params.append(('fromUpdateDate', params['from_update_date']))  # noqa: E501
        if 'to_update_date' in params:
            query_params.append(('toUpdateDate', params['to_update_date']))  # noqa: E501
        if 'fulfillment_type' in params:
            query_params.append(('fulfillmentType', params['fulfillment_type']))  # noqa: E501
        if 'channel_shipment_nos' in params:
            query_params.append(('channelShipmentNos', params['channel_shipment_nos']))  # noqa: E501
            collection_formats['channelShipmentNos'] = 'multi'  # noqa: E501
        if 'channel_order_nos' in params:
            query_params.append(('channelOrderNos', params['channel_order_nos']))  # noqa: E501
            collection_formats['channelOrderNos'] = 'multi'  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/shipments/merchant', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionOfMerchantShipmentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shipment_shipping_label(self, merchant_shipment_no, **kwargs):  # noqa: E501
        """Gets a shipping label  # noqa: E501

         Downloads the shipping label for the shipment.<br /> <br /> **NB:** it may take some time between the creation of the shipment and the availability of the label.<br />A \"404 not found\" error might indicate that the label is not available yet.<br />A \"410 gone\" the shipping label is not available anymore.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipment_shipping_label(merchant_shipment_no, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str merchant_shipment_no: The unique shipment reference as used by the merchant. (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shipment_shipping_label_with_http_info(merchant_shipment_no, **kwargs)  # noqa: E501
        else:
            (data) = self.shipment_shipping_label_with_http_info(merchant_shipment_no, **kwargs)  # noqa: E501
            return data

    def shipment_shipping_label_with_http_info(self, merchant_shipment_no, **kwargs):  # noqa: E501
        """Gets a shipping label  # noqa: E501

         Downloads the shipping label for the shipment.<br /> <br /> **NB:** it may take some time between the creation of the shipment and the availability of the label.<br />A \"404 not found\" error might indicate that the label is not available yet.<br />A \"410 gone\" the shipping label is not available anymore.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipment_shipping_label_with_http_info(merchant_shipment_no, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str merchant_shipment_no: The unique shipment reference as used by the merchant. (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['merchant_shipment_no']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shipment_shipping_label" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'merchant_shipment_no' is set
        if ('merchant_shipment_no' not in params or
                params['merchant_shipment_no'] is None):
            raise ValueError("Missing the required parameter `merchant_shipment_no` when calling `shipment_shipping_label`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'merchant_shipment_no' in params:
            path_params['merchantShipmentNo'] = params['merchant_shipment_no']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.shippingLabel', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/{merchantShipmentNo}/shippinglabel', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shipment_update(self, merchant_shipment_no, **kwargs):  # noqa: E501
        """Updates a shipment  # noqa: E501

        Updates an existing shipment with tracking information and shipping method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipment_update(merchant_shipment_no, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str merchant_shipment_no: The merchant's shipment reference. (required)
        :param MerchantShipmentTrackingRequest body: The updated tracking information.
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shipment_update_with_http_info(merchant_shipment_no, **kwargs)  # noqa: E501
        else:
            (data) = self.shipment_update_with_http_info(merchant_shipment_no, **kwargs)  # noqa: E501
            return data

    def shipment_update_with_http_info(self, merchant_shipment_no, **kwargs):  # noqa: E501
        """Updates a shipment  # noqa: E501

        Updates an existing shipment with tracking information and shipping method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shipment_update_with_http_info(merchant_shipment_no, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str merchant_shipment_no: The merchant's shipment reference. (required)
        :param MerchantShipmentTrackingRequest body: The updated tracking information.
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['merchant_shipment_no', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shipment_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'merchant_shipment_no' is set
        if ('merchant_shipment_no' not in params or
                params['merchant_shipment_no'] is None):
            raise ValueError("Missing the required parameter `merchant_shipment_no` when calling `shipment_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'merchant_shipment_no' in params:
            path_params['merchantShipmentNo'] = params['merchant_shipment_no']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/shipments/{merchantShipmentNo}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
