# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants  # noqa: E501

    OpenAPI spec version: 2.17.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MerchantStockLocationCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'is_default': 'bool',
        'fall_back_to_default': 'bool',
        'address': 'MerchantStockLocationAddressRequest',
        'phone_number': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'is_default': 'IsDefault',
        'fall_back_to_default': 'FallBackToDefault',
        'address': 'Address',
        'phone_number': 'PhoneNumber'
    }

    def __init__(self, name=None, is_default=None, fall_back_to_default=None, address=None, phone_number=None):  # noqa: E501
        """MerchantStockLocationCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._is_default = None
        self._fall_back_to_default = None
        self._address = None
        self._phone_number = None
        self.discriminator = None
        self.name = name
        if is_default is not None:
            self.is_default = is_default
        if fall_back_to_default is not None:
            self.fall_back_to_default = fall_back_to_default
        if address is not None:
            self.address = address
        if phone_number is not None:
            self.phone_number = phone_number

    @property
    def name(self):
        """Gets the name of this MerchantStockLocationCreateRequest.  # noqa: E501


        :return: The name of this MerchantStockLocationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MerchantStockLocationCreateRequest.


        :param name: The name of this MerchantStockLocationCreateRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def is_default(self):
        """Gets the is_default of this MerchantStockLocationCreateRequest.  # noqa: E501


        :return: The is_default of this MerchantStockLocationCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this MerchantStockLocationCreateRequest.


        :param is_default: The is_default of this MerchantStockLocationCreateRequest.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def fall_back_to_default(self):
        """Gets the fall_back_to_default of this MerchantStockLocationCreateRequest.  # noqa: E501

        If false: only use fulfillment by channel, else (also) use merchant fulfillment.  # noqa: E501

        :return: The fall_back_to_default of this MerchantStockLocationCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._fall_back_to_default

    @fall_back_to_default.setter
    def fall_back_to_default(self, fall_back_to_default):
        """Sets the fall_back_to_default of this MerchantStockLocationCreateRequest.

        If false: only use fulfillment by channel, else (also) use merchant fulfillment.  # noqa: E501

        :param fall_back_to_default: The fall_back_to_default of this MerchantStockLocationCreateRequest.  # noqa: E501
        :type: bool
        """

        self._fall_back_to_default = fall_back_to_default

    @property
    def address(self):
        """Gets the address of this MerchantStockLocationCreateRequest.  # noqa: E501


        :return: The address of this MerchantStockLocationCreateRequest.  # noqa: E501
        :rtype: MerchantStockLocationAddressRequest
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this MerchantStockLocationCreateRequest.


        :param address: The address of this MerchantStockLocationCreateRequest.  # noqa: E501
        :type: MerchantStockLocationAddressRequest
        """

        self._address = address

    @property
    def phone_number(self):
        """Gets the phone_number of this MerchantStockLocationCreateRequest.  # noqa: E501


        :return: The phone_number of this MerchantStockLocationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this MerchantStockLocationCreateRequest.


        :param phone_number: The phone_number of this MerchantStockLocationCreateRequest.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MerchantStockLocationCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MerchantStockLocationCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
