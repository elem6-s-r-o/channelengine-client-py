# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants  # noqa: E501

    OpenAPI spec version: 2.17.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IReturnLineHandlingResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'return_line_id': 'int',
        'quantity': 'int',
        'action': 'ReturnHandlingAction',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'deleted_at': 'datetime'
    }

    attribute_map = {
        'id': 'Id',
        'return_line_id': 'ReturnLineId',
        'quantity': 'Quantity',
        'action': 'Action',
        'created_at': 'CreatedAt',
        'updated_at': 'UpdatedAt',
        'deleted_at': 'DeletedAt'
    }

    def __init__(self, id=None, return_line_id=None, quantity=None, action=None, created_at=None, updated_at=None, deleted_at=None):  # noqa: E501
        """IReturnLineHandlingResult - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._return_line_id = None
        self._quantity = None
        self._action = None
        self._created_at = None
        self._updated_at = None
        self._deleted_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if return_line_id is not None:
            self.return_line_id = return_line_id
        if quantity is not None:
            self.quantity = quantity
        if action is not None:
            self.action = action
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if deleted_at is not None:
            self.deleted_at = deleted_at

    @property
    def id(self):
        """Gets the id of this IReturnLineHandlingResult.  # noqa: E501


        :return: The id of this IReturnLineHandlingResult.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IReturnLineHandlingResult.


        :param id: The id of this IReturnLineHandlingResult.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def return_line_id(self):
        """Gets the return_line_id of this IReturnLineHandlingResult.  # noqa: E501


        :return: The return_line_id of this IReturnLineHandlingResult.  # noqa: E501
        :rtype: int
        """
        return self._return_line_id

    @return_line_id.setter
    def return_line_id(self, return_line_id):
        """Sets the return_line_id of this IReturnLineHandlingResult.


        :param return_line_id: The return_line_id of this IReturnLineHandlingResult.  # noqa: E501
        :type: int
        """

        self._return_line_id = return_line_id

    @property
    def quantity(self):
        """Gets the quantity of this IReturnLineHandlingResult.  # noqa: E501


        :return: The quantity of this IReturnLineHandlingResult.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this IReturnLineHandlingResult.


        :param quantity: The quantity of this IReturnLineHandlingResult.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def action(self):
        """Gets the action of this IReturnLineHandlingResult.  # noqa: E501


        :return: The action of this IReturnLineHandlingResult.  # noqa: E501
        :rtype: ReturnHandlingAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this IReturnLineHandlingResult.


        :param action: The action of this IReturnLineHandlingResult.  # noqa: E501
        :type: ReturnHandlingAction
        """

        self._action = action

    @property
    def created_at(self):
        """Gets the created_at of this IReturnLineHandlingResult.  # noqa: E501


        :return: The created_at of this IReturnLineHandlingResult.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this IReturnLineHandlingResult.


        :param created_at: The created_at of this IReturnLineHandlingResult.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this IReturnLineHandlingResult.  # noqa: E501


        :return: The updated_at of this IReturnLineHandlingResult.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this IReturnLineHandlingResult.


        :param updated_at: The updated_at of this IReturnLineHandlingResult.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this IReturnLineHandlingResult.  # noqa: E501


        :return: The deleted_at of this IReturnLineHandlingResult.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this IReturnLineHandlingResult.


        :param deleted_at: The deleted_at of this IReturnLineHandlingResult.  # noqa: E501
        :type: datetime
        """

        self._deleted_at = deleted_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IReturnLineHandlingResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IReturnLineHandlingResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
