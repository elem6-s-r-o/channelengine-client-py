# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants  # noqa: E501

    OpenAPI spec version: 2.17.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IPurchaseOrderByFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'channel_id': 'int',
        'channel_name': 'str',
        'global_channel_name': 'str',
        'global_channel_id': 'int',
        'channel_purchase_order_no': 'str',
        'merchant_purchase_order_no': 'str',
        'status': 'ModulesPurchaseOrderStatus',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'type': 'ModulesPurchaseOrderType',
        'from_ship_date': 'datetime',
        'to_ship_date': 'datetime',
        'from_delivery_date': 'datetime',
        'to_delivery_date': 'datetime',
        'import_information': 'IImportInformation',
        'selling_party': 'IVendorParty',
        'ship_to_party': 'IVendorParty',
        'buying_party': 'IVendorParty',
        'billing_party': 'IVendorParty',
        'lines': 'list[IPurchaseOrderLineByFilter]'
    }

    attribute_map = {
        'id': 'Id',
        'channel_id': 'ChannelId',
        'channel_name': 'ChannelName',
        'global_channel_name': 'GlobalChannelName',
        'global_channel_id': 'GlobalChannelId',
        'channel_purchase_order_no': 'ChannelPurchaseOrderNo',
        'merchant_purchase_order_no': 'MerchantPurchaseOrderNo',
        'status': 'Status',
        'created_at': 'CreatedAt',
        'updated_at': 'UpdatedAt',
        'type': 'Type',
        'from_ship_date': 'FromShipDate',
        'to_ship_date': 'ToShipDate',
        'from_delivery_date': 'FromDeliveryDate',
        'to_delivery_date': 'ToDeliveryDate',
        'import_information': 'ImportInformation',
        'selling_party': 'SellingParty',
        'ship_to_party': 'ShipToParty',
        'buying_party': 'BuyingParty',
        'billing_party': 'BillingParty',
        'lines': 'Lines'
    }

    def __init__(self, id=None, channel_id=None, channel_name=None, global_channel_name=None, global_channel_id=None, channel_purchase_order_no=None, merchant_purchase_order_no=None, status=None, created_at=None, updated_at=None, type=None, from_ship_date=None, to_ship_date=None, from_delivery_date=None, to_delivery_date=None, import_information=None, selling_party=None, ship_to_party=None, buying_party=None, billing_party=None, lines=None):  # noqa: E501
        """IPurchaseOrderByFilter - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._channel_id = None
        self._channel_name = None
        self._global_channel_name = None
        self._global_channel_id = None
        self._channel_purchase_order_no = None
        self._merchant_purchase_order_no = None
        self._status = None
        self._created_at = None
        self._updated_at = None
        self._type = None
        self._from_ship_date = None
        self._to_ship_date = None
        self._from_delivery_date = None
        self._to_delivery_date = None
        self._import_information = None
        self._selling_party = None
        self._ship_to_party = None
        self._buying_party = None
        self._billing_party = None
        self._lines = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if channel_id is not None:
            self.channel_id = channel_id
        if channel_name is not None:
            self.channel_name = channel_name
        if global_channel_name is not None:
            self.global_channel_name = global_channel_name
        if global_channel_id is not None:
            self.global_channel_id = global_channel_id
        if channel_purchase_order_no is not None:
            self.channel_purchase_order_no = channel_purchase_order_no
        if merchant_purchase_order_no is not None:
            self.merchant_purchase_order_no = merchant_purchase_order_no
        if status is not None:
            self.status = status
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if type is not None:
            self.type = type
        if from_ship_date is not None:
            self.from_ship_date = from_ship_date
        if to_ship_date is not None:
            self.to_ship_date = to_ship_date
        if from_delivery_date is not None:
            self.from_delivery_date = from_delivery_date
        if to_delivery_date is not None:
            self.to_delivery_date = to_delivery_date
        if import_information is not None:
            self.import_information = import_information
        if selling_party is not None:
            self.selling_party = selling_party
        if ship_to_party is not None:
            self.ship_to_party = ship_to_party
        if buying_party is not None:
            self.buying_party = buying_party
        if billing_party is not None:
            self.billing_party = billing_party
        if lines is not None:
            self.lines = lines

    @property
    def id(self):
        """Gets the id of this IPurchaseOrderByFilter.  # noqa: E501


        :return: The id of this IPurchaseOrderByFilter.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IPurchaseOrderByFilter.


        :param id: The id of this IPurchaseOrderByFilter.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def channel_id(self):
        """Gets the channel_id of this IPurchaseOrderByFilter.  # noqa: E501


        :return: The channel_id of this IPurchaseOrderByFilter.  # noqa: E501
        :rtype: int
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this IPurchaseOrderByFilter.


        :param channel_id: The channel_id of this IPurchaseOrderByFilter.  # noqa: E501
        :type: int
        """

        self._channel_id = channel_id

    @property
    def channel_name(self):
        """Gets the channel_name of this IPurchaseOrderByFilter.  # noqa: E501


        :return: The channel_name of this IPurchaseOrderByFilter.  # noqa: E501
        :rtype: str
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name):
        """Sets the channel_name of this IPurchaseOrderByFilter.


        :param channel_name: The channel_name of this IPurchaseOrderByFilter.  # noqa: E501
        :type: str
        """

        self._channel_name = channel_name

    @property
    def global_channel_name(self):
        """Gets the global_channel_name of this IPurchaseOrderByFilter.  # noqa: E501


        :return: The global_channel_name of this IPurchaseOrderByFilter.  # noqa: E501
        :rtype: str
        """
        return self._global_channel_name

    @global_channel_name.setter
    def global_channel_name(self, global_channel_name):
        """Sets the global_channel_name of this IPurchaseOrderByFilter.


        :param global_channel_name: The global_channel_name of this IPurchaseOrderByFilter.  # noqa: E501
        :type: str
        """

        self._global_channel_name = global_channel_name

    @property
    def global_channel_id(self):
        """Gets the global_channel_id of this IPurchaseOrderByFilter.  # noqa: E501


        :return: The global_channel_id of this IPurchaseOrderByFilter.  # noqa: E501
        :rtype: int
        """
        return self._global_channel_id

    @global_channel_id.setter
    def global_channel_id(self, global_channel_id):
        """Sets the global_channel_id of this IPurchaseOrderByFilter.


        :param global_channel_id: The global_channel_id of this IPurchaseOrderByFilter.  # noqa: E501
        :type: int
        """

        self._global_channel_id = global_channel_id

    @property
    def channel_purchase_order_no(self):
        """Gets the channel_purchase_order_no of this IPurchaseOrderByFilter.  # noqa: E501


        :return: The channel_purchase_order_no of this IPurchaseOrderByFilter.  # noqa: E501
        :rtype: str
        """
        return self._channel_purchase_order_no

    @channel_purchase_order_no.setter
    def channel_purchase_order_no(self, channel_purchase_order_no):
        """Sets the channel_purchase_order_no of this IPurchaseOrderByFilter.


        :param channel_purchase_order_no: The channel_purchase_order_no of this IPurchaseOrderByFilter.  # noqa: E501
        :type: str
        """

        self._channel_purchase_order_no = channel_purchase_order_no

    @property
    def merchant_purchase_order_no(self):
        """Gets the merchant_purchase_order_no of this IPurchaseOrderByFilter.  # noqa: E501


        :return: The merchant_purchase_order_no of this IPurchaseOrderByFilter.  # noqa: E501
        :rtype: str
        """
        return self._merchant_purchase_order_no

    @merchant_purchase_order_no.setter
    def merchant_purchase_order_no(self, merchant_purchase_order_no):
        """Sets the merchant_purchase_order_no of this IPurchaseOrderByFilter.


        :param merchant_purchase_order_no: The merchant_purchase_order_no of this IPurchaseOrderByFilter.  # noqa: E501
        :type: str
        """

        self._merchant_purchase_order_no = merchant_purchase_order_no

    @property
    def status(self):
        """Gets the status of this IPurchaseOrderByFilter.  # noqa: E501


        :return: The status of this IPurchaseOrderByFilter.  # noqa: E501
        :rtype: ModulesPurchaseOrderStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this IPurchaseOrderByFilter.


        :param status: The status of this IPurchaseOrderByFilter.  # noqa: E501
        :type: ModulesPurchaseOrderStatus
        """

        self._status = status

    @property
    def created_at(self):
        """Gets the created_at of this IPurchaseOrderByFilter.  # noqa: E501


        :return: The created_at of this IPurchaseOrderByFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this IPurchaseOrderByFilter.


        :param created_at: The created_at of this IPurchaseOrderByFilter.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this IPurchaseOrderByFilter.  # noqa: E501


        :return: The updated_at of this IPurchaseOrderByFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this IPurchaseOrderByFilter.


        :param updated_at: The updated_at of this IPurchaseOrderByFilter.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def type(self):
        """Gets the type of this IPurchaseOrderByFilter.  # noqa: E501


        :return: The type of this IPurchaseOrderByFilter.  # noqa: E501
        :rtype: ModulesPurchaseOrderType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IPurchaseOrderByFilter.


        :param type: The type of this IPurchaseOrderByFilter.  # noqa: E501
        :type: ModulesPurchaseOrderType
        """

        self._type = type

    @property
    def from_ship_date(self):
        """Gets the from_ship_date of this IPurchaseOrderByFilter.  # noqa: E501


        :return: The from_ship_date of this IPurchaseOrderByFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._from_ship_date

    @from_ship_date.setter
    def from_ship_date(self, from_ship_date):
        """Sets the from_ship_date of this IPurchaseOrderByFilter.


        :param from_ship_date: The from_ship_date of this IPurchaseOrderByFilter.  # noqa: E501
        :type: datetime
        """

        self._from_ship_date = from_ship_date

    @property
    def to_ship_date(self):
        """Gets the to_ship_date of this IPurchaseOrderByFilter.  # noqa: E501


        :return: The to_ship_date of this IPurchaseOrderByFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._to_ship_date

    @to_ship_date.setter
    def to_ship_date(self, to_ship_date):
        """Sets the to_ship_date of this IPurchaseOrderByFilter.


        :param to_ship_date: The to_ship_date of this IPurchaseOrderByFilter.  # noqa: E501
        :type: datetime
        """

        self._to_ship_date = to_ship_date

    @property
    def from_delivery_date(self):
        """Gets the from_delivery_date of this IPurchaseOrderByFilter.  # noqa: E501


        :return: The from_delivery_date of this IPurchaseOrderByFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._from_delivery_date

    @from_delivery_date.setter
    def from_delivery_date(self, from_delivery_date):
        """Sets the from_delivery_date of this IPurchaseOrderByFilter.


        :param from_delivery_date: The from_delivery_date of this IPurchaseOrderByFilter.  # noqa: E501
        :type: datetime
        """

        self._from_delivery_date = from_delivery_date

    @property
    def to_delivery_date(self):
        """Gets the to_delivery_date of this IPurchaseOrderByFilter.  # noqa: E501


        :return: The to_delivery_date of this IPurchaseOrderByFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._to_delivery_date

    @to_delivery_date.setter
    def to_delivery_date(self, to_delivery_date):
        """Sets the to_delivery_date of this IPurchaseOrderByFilter.


        :param to_delivery_date: The to_delivery_date of this IPurchaseOrderByFilter.  # noqa: E501
        :type: datetime
        """

        self._to_delivery_date = to_delivery_date

    @property
    def import_information(self):
        """Gets the import_information of this IPurchaseOrderByFilter.  # noqa: E501


        :return: The import_information of this IPurchaseOrderByFilter.  # noqa: E501
        :rtype: IImportInformation
        """
        return self._import_information

    @import_information.setter
    def import_information(self, import_information):
        """Sets the import_information of this IPurchaseOrderByFilter.


        :param import_information: The import_information of this IPurchaseOrderByFilter.  # noqa: E501
        :type: IImportInformation
        """

        self._import_information = import_information

    @property
    def selling_party(self):
        """Gets the selling_party of this IPurchaseOrderByFilter.  # noqa: E501


        :return: The selling_party of this IPurchaseOrderByFilter.  # noqa: E501
        :rtype: IVendorParty
        """
        return self._selling_party

    @selling_party.setter
    def selling_party(self, selling_party):
        """Sets the selling_party of this IPurchaseOrderByFilter.


        :param selling_party: The selling_party of this IPurchaseOrderByFilter.  # noqa: E501
        :type: IVendorParty
        """

        self._selling_party = selling_party

    @property
    def ship_to_party(self):
        """Gets the ship_to_party of this IPurchaseOrderByFilter.  # noqa: E501


        :return: The ship_to_party of this IPurchaseOrderByFilter.  # noqa: E501
        :rtype: IVendorParty
        """
        return self._ship_to_party

    @ship_to_party.setter
    def ship_to_party(self, ship_to_party):
        """Sets the ship_to_party of this IPurchaseOrderByFilter.


        :param ship_to_party: The ship_to_party of this IPurchaseOrderByFilter.  # noqa: E501
        :type: IVendorParty
        """

        self._ship_to_party = ship_to_party

    @property
    def buying_party(self):
        """Gets the buying_party of this IPurchaseOrderByFilter.  # noqa: E501


        :return: The buying_party of this IPurchaseOrderByFilter.  # noqa: E501
        :rtype: IVendorParty
        """
        return self._buying_party

    @buying_party.setter
    def buying_party(self, buying_party):
        """Sets the buying_party of this IPurchaseOrderByFilter.


        :param buying_party: The buying_party of this IPurchaseOrderByFilter.  # noqa: E501
        :type: IVendorParty
        """

        self._buying_party = buying_party

    @property
    def billing_party(self):
        """Gets the billing_party of this IPurchaseOrderByFilter.  # noqa: E501


        :return: The billing_party of this IPurchaseOrderByFilter.  # noqa: E501
        :rtype: IVendorParty
        """
        return self._billing_party

    @billing_party.setter
    def billing_party(self, billing_party):
        """Sets the billing_party of this IPurchaseOrderByFilter.


        :param billing_party: The billing_party of this IPurchaseOrderByFilter.  # noqa: E501
        :type: IVendorParty
        """

        self._billing_party = billing_party

    @property
    def lines(self):
        """Gets the lines of this IPurchaseOrderByFilter.  # noqa: E501


        :return: The lines of this IPurchaseOrderByFilter.  # noqa: E501
        :rtype: list[IPurchaseOrderLineByFilter]
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """Sets the lines of this IPurchaseOrderByFilter.


        :param lines: The lines of this IPurchaseOrderByFilter.  # noqa: E501
        :type: list[IPurchaseOrderLineByFilter]
        """

        self._lines = lines

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPurchaseOrderByFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPurchaseOrderByFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
