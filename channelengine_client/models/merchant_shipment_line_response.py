# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants  # noqa: E501

    OpenAPI spec version: 2.17.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MerchantShipmentLineResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'merchant_product_no': 'str',
        'merchant_bundle_product_no': 'str',
        'channel_product_no': 'str',
        'order_line': 'MerchantOrderLineResponse',
        'shipment_status': 'ShipmentLineStatus',
        'extra_data': 'dict(str, str)',
        'quantity': 'int'
    }

    attribute_map = {
        'merchant_product_no': 'MerchantProductNo',
        'merchant_bundle_product_no': 'MerchantBundleProductNo',
        'channel_product_no': 'ChannelProductNo',
        'order_line': 'OrderLine',
        'shipment_status': 'ShipmentStatus',
        'extra_data': 'ExtraData',
        'quantity': 'Quantity'
    }

    def __init__(self, merchant_product_no=None, merchant_bundle_product_no=None, channel_product_no=None, order_line=None, shipment_status=None, extra_data=None, quantity=None):  # noqa: E501
        """MerchantShipmentLineResponse - a model defined in Swagger"""  # noqa: E501
        self._merchant_product_no = None
        self._merchant_bundle_product_no = None
        self._channel_product_no = None
        self._order_line = None
        self._shipment_status = None
        self._extra_data = None
        self._quantity = None
        self.discriminator = None
        self.merchant_product_no = merchant_product_no
        if merchant_bundle_product_no is not None:
            self.merchant_bundle_product_no = merchant_bundle_product_no
        if channel_product_no is not None:
            self.channel_product_no = channel_product_no
        if order_line is not None:
            self.order_line = order_line
        if shipment_status is not None:
            self.shipment_status = shipment_status
        if extra_data is not None:
            self.extra_data = extra_data
        self.quantity = quantity

    @property
    def merchant_product_no(self):
        """Gets the merchant_product_no of this MerchantShipmentLineResponse.  # noqa: E501

        The unique product reference used by the Merchant.  # noqa: E501

        :return: The merchant_product_no of this MerchantShipmentLineResponse.  # noqa: E501
        :rtype: str
        """
        return self._merchant_product_no

    @merchant_product_no.setter
    def merchant_product_no(self, merchant_product_no):
        """Sets the merchant_product_no of this MerchantShipmentLineResponse.

        The unique product reference used by the Merchant.  # noqa: E501

        :param merchant_product_no: The merchant_product_no of this MerchantShipmentLineResponse.  # noqa: E501
        :type: str
        """
        if merchant_product_no is None:
            raise ValueError("Invalid value for `merchant_product_no`, must not be `None`")  # noqa: E501

        self._merchant_product_no = merchant_product_no

    @property
    def merchant_bundle_product_no(self):
        """Gets the merchant_bundle_product_no of this MerchantShipmentLineResponse.  # noqa: E501

        The unique bundle product reference used by the Merchant.  # noqa: E501

        :return: The merchant_bundle_product_no of this MerchantShipmentLineResponse.  # noqa: E501
        :rtype: str
        """
        return self._merchant_bundle_product_no

    @merchant_bundle_product_no.setter
    def merchant_bundle_product_no(self, merchant_bundle_product_no):
        """Sets the merchant_bundle_product_no of this MerchantShipmentLineResponse.

        The unique bundle product reference used by the Merchant.  # noqa: E501

        :param merchant_bundle_product_no: The merchant_bundle_product_no of this MerchantShipmentLineResponse.  # noqa: E501
        :type: str
        """

        self._merchant_bundle_product_no = merchant_bundle_product_no

    @property
    def channel_product_no(self):
        """Gets the channel_product_no of this MerchantShipmentLineResponse.  # noqa: E501

        The unique product reference used by the Channel.  # noqa: E501

        :return: The channel_product_no of this MerchantShipmentLineResponse.  # noqa: E501
        :rtype: str
        """
        return self._channel_product_no

    @channel_product_no.setter
    def channel_product_no(self, channel_product_no):
        """Sets the channel_product_no of this MerchantShipmentLineResponse.

        The unique product reference used by the Channel.  # noqa: E501

        :param channel_product_no: The channel_product_no of this MerchantShipmentLineResponse.  # noqa: E501
        :type: str
        """

        self._channel_product_no = channel_product_no

    @property
    def order_line(self):
        """Gets the order_line of this MerchantShipmentLineResponse.  # noqa: E501


        :return: The order_line of this MerchantShipmentLineResponse.  # noqa: E501
        :rtype: MerchantOrderLineResponse
        """
        return self._order_line

    @order_line.setter
    def order_line(self, order_line):
        """Sets the order_line of this MerchantShipmentLineResponse.


        :param order_line: The order_line of this MerchantShipmentLineResponse.  # noqa: E501
        :type: MerchantOrderLineResponse
        """

        self._order_line = order_line

    @property
    def shipment_status(self):
        """Gets the shipment_status of this MerchantShipmentLineResponse.  # noqa: E501


        :return: The shipment_status of this MerchantShipmentLineResponse.  # noqa: E501
        :rtype: ShipmentLineStatus
        """
        return self._shipment_status

    @shipment_status.setter
    def shipment_status(self, shipment_status):
        """Sets the shipment_status of this MerchantShipmentLineResponse.


        :param shipment_status: The shipment_status of this MerchantShipmentLineResponse.  # noqa: E501
        :type: ShipmentLineStatus
        """

        self._shipment_status = shipment_status

    @property
    def extra_data(self):
        """Gets the extra_data of this MerchantShipmentLineResponse.  # noqa: E501

        Extra data on the shipment line. Each item must have an unqiue key  # noqa: E501

        :return: The extra_data of this MerchantShipmentLineResponse.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._extra_data

    @extra_data.setter
    def extra_data(self, extra_data):
        """Sets the extra_data of this MerchantShipmentLineResponse.

        Extra data on the shipment line. Each item must have an unqiue key  # noqa: E501

        :param extra_data: The extra_data of this MerchantShipmentLineResponse.  # noqa: E501
        :type: dict(str, str)
        """

        self._extra_data = extra_data

    @property
    def quantity(self):
        """Gets the quantity of this MerchantShipmentLineResponse.  # noqa: E501

        Number of items of the product in the shipment.  # noqa: E501

        :return: The quantity of this MerchantShipmentLineResponse.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this MerchantShipmentLineResponse.

        Number of items of the product in the shipment.  # noqa: E501

        :param quantity: The quantity of this MerchantShipmentLineResponse.  # noqa: E501
        :type: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MerchantShipmentLineResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MerchantShipmentLineResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
