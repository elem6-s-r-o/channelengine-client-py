# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants  # noqa: E501

    OpenAPI spec version: 2.17.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MerchantCreateReturn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_identifier': 'str',
        'merchant_return_no': 'str',
        'reason': 'ModuleReturnReason',
        'merchant_comment': 'str',
        'return_date': 'datetime',
        'extra_data': 'dict(str, str)',
        'lines': 'list[MerchantCreateReturnLine]'
    }

    attribute_map = {
        'order_identifier': 'OrderIdentifier',
        'merchant_return_no': 'MerchantReturnNo',
        'reason': 'Reason',
        'merchant_comment': 'MerchantComment',
        'return_date': 'ReturnDate',
        'extra_data': 'ExtraData',
        'lines': 'Lines'
    }

    def __init__(self, order_identifier=None, merchant_return_no=None, reason=None, merchant_comment=None, return_date=None, extra_data=None, lines=None):  # noqa: E501
        """MerchantCreateReturn - a model defined in Swagger"""  # noqa: E501
        self._order_identifier = None
        self._merchant_return_no = None
        self._reason = None
        self._merchant_comment = None
        self._return_date = None
        self._extra_data = None
        self._lines = None
        self.discriminator = None
        if order_identifier is not None:
            self.order_identifier = order_identifier
        if merchant_return_no is not None:
            self.merchant_return_no = merchant_return_no
        if reason is not None:
            self.reason = reason
        if merchant_comment is not None:
            self.merchant_comment = merchant_comment
        if return_date is not None:
            self.return_date = return_date
        if extra_data is not None:
            self.extra_data = extra_data
        if lines is not None:
            self.lines = lines

    @property
    def order_identifier(self):
        """Gets the order_identifier of this MerchantCreateReturn.  # noqa: E501


        :return: The order_identifier of this MerchantCreateReturn.  # noqa: E501
        :rtype: str
        """
        return self._order_identifier

    @order_identifier.setter
    def order_identifier(self, order_identifier):
        """Sets the order_identifier of this MerchantCreateReturn.


        :param order_identifier: The order_identifier of this MerchantCreateReturn.  # noqa: E501
        :type: str
        """

        self._order_identifier = order_identifier

    @property
    def merchant_return_no(self):
        """Gets the merchant_return_no of this MerchantCreateReturn.  # noqa: E501


        :return: The merchant_return_no of this MerchantCreateReturn.  # noqa: E501
        :rtype: str
        """
        return self._merchant_return_no

    @merchant_return_no.setter
    def merchant_return_no(self, merchant_return_no):
        """Sets the merchant_return_no of this MerchantCreateReturn.


        :param merchant_return_no: The merchant_return_no of this MerchantCreateReturn.  # noqa: E501
        :type: str
        """

        self._merchant_return_no = merchant_return_no

    @property
    def reason(self):
        """Gets the reason of this MerchantCreateReturn.  # noqa: E501


        :return: The reason of this MerchantCreateReturn.  # noqa: E501
        :rtype: ModuleReturnReason
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this MerchantCreateReturn.


        :param reason: The reason of this MerchantCreateReturn.  # noqa: E501
        :type: ModuleReturnReason
        """

        self._reason = reason

    @property
    def merchant_comment(self):
        """Gets the merchant_comment of this MerchantCreateReturn.  # noqa: E501


        :return: The merchant_comment of this MerchantCreateReturn.  # noqa: E501
        :rtype: str
        """
        return self._merchant_comment

    @merchant_comment.setter
    def merchant_comment(self, merchant_comment):
        """Sets the merchant_comment of this MerchantCreateReturn.


        :param merchant_comment: The merchant_comment of this MerchantCreateReturn.  # noqa: E501
        :type: str
        """

        self._merchant_comment = merchant_comment

    @property
    def return_date(self):
        """Gets the return_date of this MerchantCreateReturn.  # noqa: E501


        :return: The return_date of this MerchantCreateReturn.  # noqa: E501
        :rtype: datetime
        """
        return self._return_date

    @return_date.setter
    def return_date(self, return_date):
        """Sets the return_date of this MerchantCreateReturn.


        :param return_date: The return_date of this MerchantCreateReturn.  # noqa: E501
        :type: datetime
        """

        self._return_date = return_date

    @property
    def extra_data(self):
        """Gets the extra_data of this MerchantCreateReturn.  # noqa: E501


        :return: The extra_data of this MerchantCreateReturn.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._extra_data

    @extra_data.setter
    def extra_data(self, extra_data):
        """Sets the extra_data of this MerchantCreateReturn.


        :param extra_data: The extra_data of this MerchantCreateReturn.  # noqa: E501
        :type: dict(str, str)
        """

        self._extra_data = extra_data

    @property
    def lines(self):
        """Gets the lines of this MerchantCreateReturn.  # noqa: E501


        :return: The lines of this MerchantCreateReturn.  # noqa: E501
        :rtype: list[MerchantCreateReturnLine]
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """Sets the lines of this MerchantCreateReturn.


        :param lines: The lines of this MerchantCreateReturn.  # noqa: E501
        :type: list[MerchantCreateReturnLine]
        """

        self._lines = lines

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MerchantCreateReturn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MerchantCreateReturn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
