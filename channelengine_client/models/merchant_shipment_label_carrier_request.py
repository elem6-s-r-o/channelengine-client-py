# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants  # noqa: E501

    OpenAPI spec version: 2.17.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MerchantShipmentLabelCarrierRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lines': 'list[MerchantShipmentLineRequest]',
        'dimensions': 'MerchantShipmentPackageDimensionsRequest',
        'weight': 'MerchantShipmentPackageWeightRequest'
    }

    attribute_map = {
        'lines': 'Lines',
        'dimensions': 'Dimensions',
        'weight': 'Weight'
    }

    def __init__(self, lines=None, dimensions=None, weight=None):  # noqa: E501
        """MerchantShipmentLabelCarrierRequest - a model defined in Swagger"""  # noqa: E501
        self._lines = None
        self._dimensions = None
        self._weight = None
        self.discriminator = None
        self.lines = lines
        self.dimensions = dimensions
        self.weight = weight

    @property
    def lines(self):
        """Gets the lines of this MerchantShipmentLabelCarrierRequest.  # noqa: E501


        :return: The lines of this MerchantShipmentLabelCarrierRequest.  # noqa: E501
        :rtype: list[MerchantShipmentLineRequest]
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """Sets the lines of this MerchantShipmentLabelCarrierRequest.


        :param lines: The lines of this MerchantShipmentLabelCarrierRequest.  # noqa: E501
        :type: list[MerchantShipmentLineRequest]
        """
        if lines is None:
            raise ValueError("Invalid value for `lines`, must not be `None`")  # noqa: E501

        self._lines = lines

    @property
    def dimensions(self):
        """Gets the dimensions of this MerchantShipmentLabelCarrierRequest.  # noqa: E501


        :return: The dimensions of this MerchantShipmentLabelCarrierRequest.  # noqa: E501
        :rtype: MerchantShipmentPackageDimensionsRequest
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this MerchantShipmentLabelCarrierRequest.


        :param dimensions: The dimensions of this MerchantShipmentLabelCarrierRequest.  # noqa: E501
        :type: MerchantShipmentPackageDimensionsRequest
        """
        if dimensions is None:
            raise ValueError("Invalid value for `dimensions`, must not be `None`")  # noqa: E501

        self._dimensions = dimensions

    @property
    def weight(self):
        """Gets the weight of this MerchantShipmentLabelCarrierRequest.  # noqa: E501


        :return: The weight of this MerchantShipmentLabelCarrierRequest.  # noqa: E501
        :rtype: MerchantShipmentPackageWeightRequest
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this MerchantShipmentLabelCarrierRequest.


        :param weight: The weight of this MerchantShipmentLabelCarrierRequest.  # noqa: E501
        :type: MerchantShipmentPackageWeightRequest
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501

        self._weight = weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MerchantShipmentLabelCarrierRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MerchantShipmentLabelCarrierRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
