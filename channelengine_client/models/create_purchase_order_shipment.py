# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants  # noqa: E501

    OpenAPI spec version: 2.17.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreatePurchaseOrderShipment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'carrier_shipment_no': 'str',
        'carrier_name': 'str',
        'merchant_shipment_no': 'str',
        'shipment_type': 'ShipmentType',
        'shipped_date': 'datetime',
        'estimated_delivery_date': 'datetime',
        'selling_party_id': 'str',
        'ship_to_party_id': 'str',
        'bill_of_lading_number': 'str',
        'shipment_weight_unit_of_measure': 'WeightUnitOfMeasure',
        'shipment_weight': 'float',
        'shipment_volume_unit_of_measure': 'VolumeUnitOfMeasure',
        'shipment_volume': 'float',
        'lines': 'list[ChangePurchaseOrderShipmentLine]'
    }

    attribute_map = {
        'carrier_shipment_no': 'CarrierShipmentNo',
        'carrier_name': 'CarrierName',
        'merchant_shipment_no': 'MerchantShipmentNo',
        'shipment_type': 'ShipmentType',
        'shipped_date': 'ShippedDate',
        'estimated_delivery_date': 'EstimatedDeliveryDate',
        'selling_party_id': 'SellingPartyId',
        'ship_to_party_id': 'ShipToPartyId',
        'bill_of_lading_number': 'BillOfLadingNumber',
        'shipment_weight_unit_of_measure': 'ShipmentWeightUnitOfMeasure',
        'shipment_weight': 'ShipmentWeight',
        'shipment_volume_unit_of_measure': 'ShipmentVolumeUnitOfMeasure',
        'shipment_volume': 'ShipmentVolume',
        'lines': 'Lines'
    }

    def __init__(self, carrier_shipment_no=None, carrier_name=None, merchant_shipment_no=None, shipment_type=None, shipped_date=None, estimated_delivery_date=None, selling_party_id=None, ship_to_party_id=None, bill_of_lading_number=None, shipment_weight_unit_of_measure=None, shipment_weight=None, shipment_volume_unit_of_measure=None, shipment_volume=None, lines=None):  # noqa: E501
        """CreatePurchaseOrderShipment - a model defined in Swagger"""  # noqa: E501
        self._carrier_shipment_no = None
        self._carrier_name = None
        self._merchant_shipment_no = None
        self._shipment_type = None
        self._shipped_date = None
        self._estimated_delivery_date = None
        self._selling_party_id = None
        self._ship_to_party_id = None
        self._bill_of_lading_number = None
        self._shipment_weight_unit_of_measure = None
        self._shipment_weight = None
        self._shipment_volume_unit_of_measure = None
        self._shipment_volume = None
        self._lines = None
        self.discriminator = None
        if carrier_shipment_no is not None:
            self.carrier_shipment_no = carrier_shipment_no
        if carrier_name is not None:
            self.carrier_name = carrier_name
        if merchant_shipment_no is not None:
            self.merchant_shipment_no = merchant_shipment_no
        if shipment_type is not None:
            self.shipment_type = shipment_type
        if shipped_date is not None:
            self.shipped_date = shipped_date
        if estimated_delivery_date is not None:
            self.estimated_delivery_date = estimated_delivery_date
        if selling_party_id is not None:
            self.selling_party_id = selling_party_id
        if ship_to_party_id is not None:
            self.ship_to_party_id = ship_to_party_id
        if bill_of_lading_number is not None:
            self.bill_of_lading_number = bill_of_lading_number
        if shipment_weight_unit_of_measure is not None:
            self.shipment_weight_unit_of_measure = shipment_weight_unit_of_measure
        if shipment_weight is not None:
            self.shipment_weight = shipment_weight
        if shipment_volume_unit_of_measure is not None:
            self.shipment_volume_unit_of_measure = shipment_volume_unit_of_measure
        if shipment_volume is not None:
            self.shipment_volume = shipment_volume
        if lines is not None:
            self.lines = lines

    @property
    def carrier_shipment_no(self):
        """Gets the carrier_shipment_no of this CreatePurchaseOrderShipment.  # noqa: E501

        The field is also known as PRO number is a unique number assigned by the carrier.  It is used to identify and track the shipment that goes out for delivery.  This field is mandatory for US, CA, MX shipment confirmations of Amazon Vendor  # noqa: E501

        :return: The carrier_shipment_no of this CreatePurchaseOrderShipment.  # noqa: E501
        :rtype: str
        """
        return self._carrier_shipment_no

    @carrier_shipment_no.setter
    def carrier_shipment_no(self, carrier_shipment_no):
        """Sets the carrier_shipment_no of this CreatePurchaseOrderShipment.

        The field is also known as PRO number is a unique number assigned by the carrier.  It is used to identify and track the shipment that goes out for delivery.  This field is mandatory for US, CA, MX shipment confirmations of Amazon Vendor  # noqa: E501

        :param carrier_shipment_no: The carrier_shipment_no of this CreatePurchaseOrderShipment.  # noqa: E501
        :type: str
        """

        self._carrier_shipment_no = carrier_shipment_no

    @property
    def carrier_name(self):
        """Gets the carrier_name of this CreatePurchaseOrderShipment.  # noqa: E501

        Name of the carrier  # noqa: E501

        :return: The carrier_name of this CreatePurchaseOrderShipment.  # noqa: E501
        :rtype: str
        """
        return self._carrier_name

    @carrier_name.setter
    def carrier_name(self, carrier_name):
        """Sets the carrier_name of this CreatePurchaseOrderShipment.

        Name of the carrier  # noqa: E501

        :param carrier_name: The carrier_name of this CreatePurchaseOrderShipment.  # noqa: E501
        :type: str
        """

        self._carrier_name = carrier_name

    @property
    def merchant_shipment_no(self):
        """Gets the merchant_shipment_no of this CreatePurchaseOrderShipment.  # noqa: E501

        The number the merchant uses to identify this PO shipment  # noqa: E501

        :return: The merchant_shipment_no of this CreatePurchaseOrderShipment.  # noqa: E501
        :rtype: str
        """
        return self._merchant_shipment_no

    @merchant_shipment_no.setter
    def merchant_shipment_no(self, merchant_shipment_no):
        """Sets the merchant_shipment_no of this CreatePurchaseOrderShipment.

        The number the merchant uses to identify this PO shipment  # noqa: E501

        :param merchant_shipment_no: The merchant_shipment_no of this CreatePurchaseOrderShipment.  # noqa: E501
        :type: str
        """

        self._merchant_shipment_no = merchant_shipment_no

    @property
    def shipment_type(self):
        """Gets the shipment_type of this CreatePurchaseOrderShipment.  # noqa: E501


        :return: The shipment_type of this CreatePurchaseOrderShipment.  # noqa: E501
        :rtype: ShipmentType
        """
        return self._shipment_type

    @shipment_type.setter
    def shipment_type(self, shipment_type):
        """Sets the shipment_type of this CreatePurchaseOrderShipment.


        :param shipment_type: The shipment_type of this CreatePurchaseOrderShipment.  # noqa: E501
        :type: ShipmentType
        """

        self._shipment_type = shipment_type

    @property
    def shipped_date(self):
        """Gets the shipped_date of this CreatePurchaseOrderShipment.  # noqa: E501

        When the shipment will be/was shipped  # noqa: E501

        :return: The shipped_date of this CreatePurchaseOrderShipment.  # noqa: E501
        :rtype: datetime
        """
        return self._shipped_date

    @shipped_date.setter
    def shipped_date(self, shipped_date):
        """Sets the shipped_date of this CreatePurchaseOrderShipment.

        When the shipment will be/was shipped  # noqa: E501

        :param shipped_date: The shipped_date of this CreatePurchaseOrderShipment.  # noqa: E501
        :type: datetime
        """

        self._shipped_date = shipped_date

    @property
    def estimated_delivery_date(self):
        """Gets the estimated_delivery_date of this CreatePurchaseOrderShipment.  # noqa: E501

        Estimated delivery time in the channel's warehouse  # noqa: E501

        :return: The estimated_delivery_date of this CreatePurchaseOrderShipment.  # noqa: E501
        :rtype: datetime
        """
        return self._estimated_delivery_date

    @estimated_delivery_date.setter
    def estimated_delivery_date(self, estimated_delivery_date):
        """Sets the estimated_delivery_date of this CreatePurchaseOrderShipment.

        Estimated delivery time in the channel's warehouse  # noqa: E501

        :param estimated_delivery_date: The estimated_delivery_date of this CreatePurchaseOrderShipment.  # noqa: E501
        :type: datetime
        """

        self._estimated_delivery_date = estimated_delivery_date

    @property
    def selling_party_id(self):
        """Gets the selling_party_id of this CreatePurchaseOrderShipment.  # noqa: E501

        The merchant's identifying 'selling party number' at the channel  # noqa: E501

        :return: The selling_party_id of this CreatePurchaseOrderShipment.  # noqa: E501
        :rtype: str
        """
        return self._selling_party_id

    @selling_party_id.setter
    def selling_party_id(self, selling_party_id):
        """Sets the selling_party_id of this CreatePurchaseOrderShipment.

        The merchant's identifying 'selling party number' at the channel  # noqa: E501

        :param selling_party_id: The selling_party_id of this CreatePurchaseOrderShipment.  # noqa: E501
        :type: str
        """

        self._selling_party_id = selling_party_id

    @property
    def ship_to_party_id(self):
        """Gets the ship_to_party_id of this CreatePurchaseOrderShipment.  # noqa: E501

        The destination's 'ship to party' number at the channel  # noqa: E501

        :return: The ship_to_party_id of this CreatePurchaseOrderShipment.  # noqa: E501
        :rtype: str
        """
        return self._ship_to_party_id

    @ship_to_party_id.setter
    def ship_to_party_id(self, ship_to_party_id):
        """Sets the ship_to_party_id of this CreatePurchaseOrderShipment.

        The destination's 'ship to party' number at the channel  # noqa: E501

        :param ship_to_party_id: The ship_to_party_id of this CreatePurchaseOrderShipment.  # noqa: E501
        :type: str
        """

        self._ship_to_party_id = ship_to_party_id

    @property
    def bill_of_lading_number(self):
        """Gets the bill_of_lading_number of this CreatePurchaseOrderShipment.  # noqa: E501

        Bill Of Lading (BOL) number is the unique number assigned by the vendor. The BOL present in the Shipment Confirmation message ideally matches the paper BOL provided with the shipment, but that is no must. Instead of BOL, an alternative reference number (like Delivery Note Number) for the shipment can also be sent in this field.  # noqa: E501

        :return: The bill_of_lading_number of this CreatePurchaseOrderShipment.  # noqa: E501
        :rtype: str
        """
        return self._bill_of_lading_number

    @bill_of_lading_number.setter
    def bill_of_lading_number(self, bill_of_lading_number):
        """Sets the bill_of_lading_number of this CreatePurchaseOrderShipment.

        Bill Of Lading (BOL) number is the unique number assigned by the vendor. The BOL present in the Shipment Confirmation message ideally matches the paper BOL provided with the shipment, but that is no must. Instead of BOL, an alternative reference number (like Delivery Note Number) for the shipment can also be sent in this field.  # noqa: E501

        :param bill_of_lading_number: The bill_of_lading_number of this CreatePurchaseOrderShipment.  # noqa: E501
        :type: str
        """

        self._bill_of_lading_number = bill_of_lading_number

    @property
    def shipment_weight_unit_of_measure(self):
        """Gets the shipment_weight_unit_of_measure of this CreatePurchaseOrderShipment.  # noqa: E501


        :return: The shipment_weight_unit_of_measure of this CreatePurchaseOrderShipment.  # noqa: E501
        :rtype: WeightUnitOfMeasure
        """
        return self._shipment_weight_unit_of_measure

    @shipment_weight_unit_of_measure.setter
    def shipment_weight_unit_of_measure(self, shipment_weight_unit_of_measure):
        """Sets the shipment_weight_unit_of_measure of this CreatePurchaseOrderShipment.


        :param shipment_weight_unit_of_measure: The shipment_weight_unit_of_measure of this CreatePurchaseOrderShipment.  # noqa: E501
        :type: WeightUnitOfMeasure
        """

        self._shipment_weight_unit_of_measure = shipment_weight_unit_of_measure

    @property
    def shipment_weight(self):
        """Gets the shipment_weight of this CreatePurchaseOrderShipment.  # noqa: E501

        The shipment's weight  # noqa: E501

        :return: The shipment_weight of this CreatePurchaseOrderShipment.  # noqa: E501
        :rtype: float
        """
        return self._shipment_weight

    @shipment_weight.setter
    def shipment_weight(self, shipment_weight):
        """Sets the shipment_weight of this CreatePurchaseOrderShipment.

        The shipment's weight  # noqa: E501

        :param shipment_weight: The shipment_weight of this CreatePurchaseOrderShipment.  # noqa: E501
        :type: float
        """

        self._shipment_weight = shipment_weight

    @property
    def shipment_volume_unit_of_measure(self):
        """Gets the shipment_volume_unit_of_measure of this CreatePurchaseOrderShipment.  # noqa: E501


        :return: The shipment_volume_unit_of_measure of this CreatePurchaseOrderShipment.  # noqa: E501
        :rtype: VolumeUnitOfMeasure
        """
        return self._shipment_volume_unit_of_measure

    @shipment_volume_unit_of_measure.setter
    def shipment_volume_unit_of_measure(self, shipment_volume_unit_of_measure):
        """Sets the shipment_volume_unit_of_measure of this CreatePurchaseOrderShipment.


        :param shipment_volume_unit_of_measure: The shipment_volume_unit_of_measure of this CreatePurchaseOrderShipment.  # noqa: E501
        :type: VolumeUnitOfMeasure
        """

        self._shipment_volume_unit_of_measure = shipment_volume_unit_of_measure

    @property
    def shipment_volume(self):
        """Gets the shipment_volume of this CreatePurchaseOrderShipment.  # noqa: E501

        The shipment's volume  # noqa: E501

        :return: The shipment_volume of this CreatePurchaseOrderShipment.  # noqa: E501
        :rtype: float
        """
        return self._shipment_volume

    @shipment_volume.setter
    def shipment_volume(self, shipment_volume):
        """Sets the shipment_volume of this CreatePurchaseOrderShipment.

        The shipment's volume  # noqa: E501

        :param shipment_volume: The shipment_volume of this CreatePurchaseOrderShipment.  # noqa: E501
        :type: float
        """

        self._shipment_volume = shipment_volume

    @property
    def lines(self):
        """Gets the lines of this CreatePurchaseOrderShipment.  # noqa: E501

        Shipment information for each shipped product  # noqa: E501

        :return: The lines of this CreatePurchaseOrderShipment.  # noqa: E501
        :rtype: list[ChangePurchaseOrderShipmentLine]
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """Sets the lines of this CreatePurchaseOrderShipment.

        Shipment information for each shipped product  # noqa: E501

        :param lines: The lines of this CreatePurchaseOrderShipment.  # noqa: E501
        :type: list[ChangePurchaseOrderShipmentLine]
        """

        self._lines = lines

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreatePurchaseOrderShipment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatePurchaseOrderShipment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
