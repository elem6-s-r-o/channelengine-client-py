# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants  # noqa: E501

    OpenAPI spec version: 2.17.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MerchantFulfillmentStockLocationItemResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'reserved_quantity': 'int',
        'available_quantity': 'int',
        'allocated_quantity': 'int',
        'in_transit_quantity': 'int',
        'fulfillment_center_processing_quantity': 'int',
        'defective_quantity': 'int',
        'expired_quantity': 'int',
        'warehouse_damaged_quantity': 'int',
        'customer_damaged_quantity': 'int',
        'carrier_damaged_quantity': 'int',
        'pending_pickup_quantity': 'int',
        'inbound_quantity': 'int',
        'return_quantity': 'int',
        'researching_quantity': 'int',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'reserved_quantity': 'ReservedQuantity',
        'available_quantity': 'AvailableQuantity',
        'allocated_quantity': 'AllocatedQuantity',
        'in_transit_quantity': 'InTransitQuantity',
        'fulfillment_center_processing_quantity': 'FulfillmentCenterProcessingQuantity',
        'defective_quantity': 'DefectiveQuantity',
        'expired_quantity': 'ExpiredQuantity',
        'warehouse_damaged_quantity': 'WarehouseDamagedQuantity',
        'customer_damaged_quantity': 'CustomerDamagedQuantity',
        'carrier_damaged_quantity': 'CarrierDamagedQuantity',
        'pending_pickup_quantity': 'PendingPickupQuantity',
        'inbound_quantity': 'InboundQuantity',
        'return_quantity': 'ReturnQuantity',
        'researching_quantity': 'ResearchingQuantity',
        'updated_at': 'UpdatedAt'
    }

    def __init__(self, id=None, name=None, reserved_quantity=None, available_quantity=None, allocated_quantity=None, in_transit_quantity=None, fulfillment_center_processing_quantity=None, defective_quantity=None, expired_quantity=None, warehouse_damaged_quantity=None, customer_damaged_quantity=None, carrier_damaged_quantity=None, pending_pickup_quantity=None, inbound_quantity=None, return_quantity=None, researching_quantity=None, updated_at=None):  # noqa: E501
        """MerchantFulfillmentStockLocationItemResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._reserved_quantity = None
        self._available_quantity = None
        self._allocated_quantity = None
        self._in_transit_quantity = None
        self._fulfillment_center_processing_quantity = None
        self._defective_quantity = None
        self._expired_quantity = None
        self._warehouse_damaged_quantity = None
        self._customer_damaged_quantity = None
        self._carrier_damaged_quantity = None
        self._pending_pickup_quantity = None
        self._inbound_quantity = None
        self._return_quantity = None
        self._researching_quantity = None
        self._updated_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if reserved_quantity is not None:
            self.reserved_quantity = reserved_quantity
        if available_quantity is not None:
            self.available_quantity = available_quantity
        if allocated_quantity is not None:
            self.allocated_quantity = allocated_quantity
        if in_transit_quantity is not None:
            self.in_transit_quantity = in_transit_quantity
        if fulfillment_center_processing_quantity is not None:
            self.fulfillment_center_processing_quantity = fulfillment_center_processing_quantity
        if defective_quantity is not None:
            self.defective_quantity = defective_quantity
        if expired_quantity is not None:
            self.expired_quantity = expired_quantity
        if warehouse_damaged_quantity is not None:
            self.warehouse_damaged_quantity = warehouse_damaged_quantity
        if customer_damaged_quantity is not None:
            self.customer_damaged_quantity = customer_damaged_quantity
        if carrier_damaged_quantity is not None:
            self.carrier_damaged_quantity = carrier_damaged_quantity
        if pending_pickup_quantity is not None:
            self.pending_pickup_quantity = pending_pickup_quantity
        if inbound_quantity is not None:
            self.inbound_quantity = inbound_quantity
        if return_quantity is not None:
            self.return_quantity = return_quantity
        if researching_quantity is not None:
            self.researching_quantity = researching_quantity
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501

        The ChannelEngine id of the stock location.  # noqa: E501

        :return: The id of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MerchantFulfillmentStockLocationItemResponse.

        The ChannelEngine id of the stock location.  # noqa: E501

        :param id: The id of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501

        The ChannelEngine name of the stock location.  # noqa: E501

        :return: The name of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MerchantFulfillmentStockLocationItemResponse.

        The ChannelEngine name of the stock location.  # noqa: E501

        :param name: The name of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def reserved_quantity(self):
        """Gets the reserved_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501

        Total quantity reserved for orders.  # noqa: E501

        :return: The reserved_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :rtype: int
        """
        return self._reserved_quantity

    @reserved_quantity.setter
    def reserved_quantity(self, reserved_quantity):
        """Sets the reserved_quantity of this MerchantFulfillmentStockLocationItemResponse.

        Total quantity reserved for orders.  # noqa: E501

        :param reserved_quantity: The reserved_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :type: int
        """

        self._reserved_quantity = reserved_quantity

    @property
    def available_quantity(self):
        """Gets the available_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501

        The quantity that is available for fulfillment orders.  # noqa: E501

        :return: The available_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :rtype: int
        """
        return self._available_quantity

    @available_quantity.setter
    def available_quantity(self, available_quantity):
        """Sets the available_quantity of this MerchantFulfillmentStockLocationItemResponse.

        The quantity that is available for fulfillment orders.  # noqa: E501

        :param available_quantity: The available_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :type: int
        """

        self._available_quantity = available_quantity

    @property
    def allocated_quantity(self):
        """Gets the allocated_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501

        Quantity pending customer order  # noqa: E501

        :return: The allocated_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :rtype: int
        """
        return self._allocated_quantity

    @allocated_quantity.setter
    def allocated_quantity(self, allocated_quantity):
        """Sets the allocated_quantity of this MerchantFulfillmentStockLocationItemResponse.

        Quantity pending customer order  # noqa: E501

        :param allocated_quantity: The allocated_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :type: int
        """

        self._allocated_quantity = allocated_quantity

    @property
    def in_transit_quantity(self):
        """Gets the in_transit_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501

        Quantity in transit / 'transshipment' (Amazon)  # noqa: E501

        :return: The in_transit_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :rtype: int
        """
        return self._in_transit_quantity

    @in_transit_quantity.setter
    def in_transit_quantity(self, in_transit_quantity):
        """Sets the in_transit_quantity of this MerchantFulfillmentStockLocationItemResponse.

        Quantity in transit / 'transshipment' (Amazon)  # noqa: E501

        :param in_transit_quantity: The in_transit_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :type: int
        """

        self._in_transit_quantity = in_transit_quantity

    @property
    def fulfillment_center_processing_quantity(self):
        """Gets the fulfillment_center_processing_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501

        Quantity that is in processing at the fulfillment warehouse (center)  # noqa: E501

        :return: The fulfillment_center_processing_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :rtype: int
        """
        return self._fulfillment_center_processing_quantity

    @fulfillment_center_processing_quantity.setter
    def fulfillment_center_processing_quantity(self, fulfillment_center_processing_quantity):
        """Sets the fulfillment_center_processing_quantity of this MerchantFulfillmentStockLocationItemResponse.

        Quantity that is in processing at the fulfillment warehouse (center)  # noqa: E501

        :param fulfillment_center_processing_quantity: The fulfillment_center_processing_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :type: int
        """

        self._fulfillment_center_processing_quantity = fulfillment_center_processing_quantity

    @property
    def defective_quantity(self):
        """Gets the defective_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501

        The number of units in defective disposition.  # noqa: E501

        :return: The defective_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :rtype: int
        """
        return self._defective_quantity

    @defective_quantity.setter
    def defective_quantity(self, defective_quantity):
        """Sets the defective_quantity of this MerchantFulfillmentStockLocationItemResponse.

        The number of units in defective disposition.  # noqa: E501

        :param defective_quantity: The defective_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :type: int
        """

        self._defective_quantity = defective_quantity

    @property
    def expired_quantity(self):
        """Gets the expired_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501

        The number of units in expired disposition.  # noqa: E501

        :return: The expired_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :rtype: int
        """
        return self._expired_quantity

    @expired_quantity.setter
    def expired_quantity(self, expired_quantity):
        """Sets the expired_quantity of this MerchantFulfillmentStockLocationItemResponse.

        The number of units in expired disposition.  # noqa: E501

        :param expired_quantity: The expired_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :type: int
        """

        self._expired_quantity = expired_quantity

    @property
    def warehouse_damaged_quantity(self):
        """Gets the warehouse_damaged_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501

        The number of units in warehouse damaged disposition.  # noqa: E501

        :return: The warehouse_damaged_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_damaged_quantity

    @warehouse_damaged_quantity.setter
    def warehouse_damaged_quantity(self, warehouse_damaged_quantity):
        """Sets the warehouse_damaged_quantity of this MerchantFulfillmentStockLocationItemResponse.

        The number of units in warehouse damaged disposition.  # noqa: E501

        :param warehouse_damaged_quantity: The warehouse_damaged_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :type: int
        """

        self._warehouse_damaged_quantity = warehouse_damaged_quantity

    @property
    def customer_damaged_quantity(self):
        """Gets the customer_damaged_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501

        The number of units in customer damaged disposition.  # noqa: E501

        :return: The customer_damaged_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :rtype: int
        """
        return self._customer_damaged_quantity

    @customer_damaged_quantity.setter
    def customer_damaged_quantity(self, customer_damaged_quantity):
        """Sets the customer_damaged_quantity of this MerchantFulfillmentStockLocationItemResponse.

        The number of units in customer damaged disposition.  # noqa: E501

        :param customer_damaged_quantity: The customer_damaged_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :type: int
        """

        self._customer_damaged_quantity = customer_damaged_quantity

    @property
    def carrier_damaged_quantity(self):
        """Gets the carrier_damaged_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501

        The number of units in carrier damaged disposition.  # noqa: E501

        :return: The carrier_damaged_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :rtype: int
        """
        return self._carrier_damaged_quantity

    @carrier_damaged_quantity.setter
    def carrier_damaged_quantity(self, carrier_damaged_quantity):
        """Sets the carrier_damaged_quantity of this MerchantFulfillmentStockLocationItemResponse.

        The number of units in carrier damaged disposition.  # noqa: E501

        :param carrier_damaged_quantity: The carrier_damaged_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :type: int
        """

        self._carrier_damaged_quantity = carrier_damaged_quantity

    @property
    def pending_pickup_quantity(self):
        """Gets the pending_pickup_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501

        The number of units in pending pickup disposition.  # noqa: E501

        :return: The pending_pickup_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :rtype: int
        """
        return self._pending_pickup_quantity

    @pending_pickup_quantity.setter
    def pending_pickup_quantity(self, pending_pickup_quantity):
        """Sets the pending_pickup_quantity of this MerchantFulfillmentStockLocationItemResponse.

        The number of units in pending pickup disposition.  # noqa: E501

        :param pending_pickup_quantity: The pending_pickup_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :type: int
        """

        self._pending_pickup_quantity = pending_pickup_quantity

    @property
    def inbound_quantity(self):
        """Gets the inbound_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501

        Total quantity that is inbound (in inbound [aka fulfillment] shipment from the seller to the fulfillment warehouse)  # noqa: E501

        :return: The inbound_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :rtype: int
        """
        return self._inbound_quantity

    @inbound_quantity.setter
    def inbound_quantity(self, inbound_quantity):
        """Sets the inbound_quantity of this MerchantFulfillmentStockLocationItemResponse.

        Total quantity that is inbound (in inbound [aka fulfillment] shipment from the seller to the fulfillment warehouse)  # noqa: E501

        :param inbound_quantity: The inbound_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :type: int
        """

        self._inbound_quantity = inbound_quantity

    @property
    def return_quantity(self):
        """Gets the return_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501

        Total quantity in on going returns  # noqa: E501

        :return: The return_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :rtype: int
        """
        return self._return_quantity

    @return_quantity.setter
    def return_quantity(self, return_quantity):
        """Sets the return_quantity of this MerchantFulfillmentStockLocationItemResponse.

        Total quantity in on going returns  # noqa: E501

        :param return_quantity: The return_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :type: int
        """

        self._return_quantity = return_quantity

    @property
    def researching_quantity(self):
        """Gets the researching_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501

        Quantity that is being researched  # noqa: E501

        :return: The researching_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :rtype: int
        """
        return self._researching_quantity

    @researching_quantity.setter
    def researching_quantity(self, researching_quantity):
        """Sets the researching_quantity of this MerchantFulfillmentStockLocationItemResponse.

        Quantity that is being researched  # noqa: E501

        :param researching_quantity: The researching_quantity of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :type: int
        """

        self._researching_quantity = researching_quantity

    @property
    def updated_at(self):
        """Gets the updated_at of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501

        The timestamp of the last stock update for the stock location.  # noqa: E501

        :return: The updated_at of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MerchantFulfillmentStockLocationItemResponse.

        The timestamp of the last stock update for the stock location.  # noqa: E501

        :param updated_at: The updated_at of this MerchantFulfillmentStockLocationItemResponse.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MerchantFulfillmentStockLocationItemResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MerchantFulfillmentStockLocationItemResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
