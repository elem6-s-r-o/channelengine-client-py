# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants  # noqa: E501

    OpenAPI spec version: 2.17.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IPurchaseOrderLineByFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'channel_order_line_no': 'str',
        'channel_product_no': 'str',
        'merchant_product_no': 'str',
        'quantity': 'int',
        'is_back_order_allowed': 'bool',
        'unit_of_measure': 'PurchaseOrderLineUnitOfMeasure',
        'unit_size': 'int',
        'net_cost_amount': 'float',
        'net_cost_currency': 'str',
        'list_price_amount': 'float',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'acknowledged_date': 'datetime',
        'line_total': 'float'
    }

    attribute_map = {
        'id': 'Id',
        'channel_order_line_no': 'ChannelOrderLineNo',
        'channel_product_no': 'ChannelProductNo',
        'merchant_product_no': 'MerchantProductNo',
        'quantity': 'Quantity',
        'is_back_order_allowed': 'IsBackOrderAllowed',
        'unit_of_measure': 'UnitOfMeasure',
        'unit_size': 'UnitSize',
        'net_cost_amount': 'NetCostAmount',
        'net_cost_currency': 'NetCostCurrency',
        'list_price_amount': 'ListPriceAmount',
        'created_at': 'CreatedAt',
        'updated_at': 'UpdatedAt',
        'acknowledged_date': 'AcknowledgedDate',
        'line_total': 'LineTotal'
    }

    def __init__(self, id=None, channel_order_line_no=None, channel_product_no=None, merchant_product_no=None, quantity=None, is_back_order_allowed=None, unit_of_measure=None, unit_size=None, net_cost_amount=None, net_cost_currency=None, list_price_amount=None, created_at=None, updated_at=None, acknowledged_date=None, line_total=None):  # noqa: E501
        """IPurchaseOrderLineByFilter - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._channel_order_line_no = None
        self._channel_product_no = None
        self._merchant_product_no = None
        self._quantity = None
        self._is_back_order_allowed = None
        self._unit_of_measure = None
        self._unit_size = None
        self._net_cost_amount = None
        self._net_cost_currency = None
        self._list_price_amount = None
        self._created_at = None
        self._updated_at = None
        self._acknowledged_date = None
        self._line_total = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if channel_order_line_no is not None:
            self.channel_order_line_no = channel_order_line_no
        if channel_product_no is not None:
            self.channel_product_no = channel_product_no
        if merchant_product_no is not None:
            self.merchant_product_no = merchant_product_no
        if quantity is not None:
            self.quantity = quantity
        if is_back_order_allowed is not None:
            self.is_back_order_allowed = is_back_order_allowed
        if unit_of_measure is not None:
            self.unit_of_measure = unit_of_measure
        if unit_size is not None:
            self.unit_size = unit_size
        if net_cost_amount is not None:
            self.net_cost_amount = net_cost_amount
        if net_cost_currency is not None:
            self.net_cost_currency = net_cost_currency
        if list_price_amount is not None:
            self.list_price_amount = list_price_amount
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if acknowledged_date is not None:
            self.acknowledged_date = acknowledged_date
        if line_total is not None:
            self.line_total = line_total

    @property
    def id(self):
        """Gets the id of this IPurchaseOrderLineByFilter.  # noqa: E501


        :return: The id of this IPurchaseOrderLineByFilter.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IPurchaseOrderLineByFilter.


        :param id: The id of this IPurchaseOrderLineByFilter.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def channel_order_line_no(self):
        """Gets the channel_order_line_no of this IPurchaseOrderLineByFilter.  # noqa: E501


        :return: The channel_order_line_no of this IPurchaseOrderLineByFilter.  # noqa: E501
        :rtype: str
        """
        return self._channel_order_line_no

    @channel_order_line_no.setter
    def channel_order_line_no(self, channel_order_line_no):
        """Sets the channel_order_line_no of this IPurchaseOrderLineByFilter.


        :param channel_order_line_no: The channel_order_line_no of this IPurchaseOrderLineByFilter.  # noqa: E501
        :type: str
        """

        self._channel_order_line_no = channel_order_line_no

    @property
    def channel_product_no(self):
        """Gets the channel_product_no of this IPurchaseOrderLineByFilter.  # noqa: E501


        :return: The channel_product_no of this IPurchaseOrderLineByFilter.  # noqa: E501
        :rtype: str
        """
        return self._channel_product_no

    @channel_product_no.setter
    def channel_product_no(self, channel_product_no):
        """Sets the channel_product_no of this IPurchaseOrderLineByFilter.


        :param channel_product_no: The channel_product_no of this IPurchaseOrderLineByFilter.  # noqa: E501
        :type: str
        """

        self._channel_product_no = channel_product_no

    @property
    def merchant_product_no(self):
        """Gets the merchant_product_no of this IPurchaseOrderLineByFilter.  # noqa: E501


        :return: The merchant_product_no of this IPurchaseOrderLineByFilter.  # noqa: E501
        :rtype: str
        """
        return self._merchant_product_no

    @merchant_product_no.setter
    def merchant_product_no(self, merchant_product_no):
        """Sets the merchant_product_no of this IPurchaseOrderLineByFilter.


        :param merchant_product_no: The merchant_product_no of this IPurchaseOrderLineByFilter.  # noqa: E501
        :type: str
        """

        self._merchant_product_no = merchant_product_no

    @property
    def quantity(self):
        """Gets the quantity of this IPurchaseOrderLineByFilter.  # noqa: E501


        :return: The quantity of this IPurchaseOrderLineByFilter.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this IPurchaseOrderLineByFilter.


        :param quantity: The quantity of this IPurchaseOrderLineByFilter.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def is_back_order_allowed(self):
        """Gets the is_back_order_allowed of this IPurchaseOrderLineByFilter.  # noqa: E501


        :return: The is_back_order_allowed of this IPurchaseOrderLineByFilter.  # noqa: E501
        :rtype: bool
        """
        return self._is_back_order_allowed

    @is_back_order_allowed.setter
    def is_back_order_allowed(self, is_back_order_allowed):
        """Sets the is_back_order_allowed of this IPurchaseOrderLineByFilter.


        :param is_back_order_allowed: The is_back_order_allowed of this IPurchaseOrderLineByFilter.  # noqa: E501
        :type: bool
        """

        self._is_back_order_allowed = is_back_order_allowed

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this IPurchaseOrderLineByFilter.  # noqa: E501


        :return: The unit_of_measure of this IPurchaseOrderLineByFilter.  # noqa: E501
        :rtype: PurchaseOrderLineUnitOfMeasure
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this IPurchaseOrderLineByFilter.


        :param unit_of_measure: The unit_of_measure of this IPurchaseOrderLineByFilter.  # noqa: E501
        :type: PurchaseOrderLineUnitOfMeasure
        """

        self._unit_of_measure = unit_of_measure

    @property
    def unit_size(self):
        """Gets the unit_size of this IPurchaseOrderLineByFilter.  # noqa: E501


        :return: The unit_size of this IPurchaseOrderLineByFilter.  # noqa: E501
        :rtype: int
        """
        return self._unit_size

    @unit_size.setter
    def unit_size(self, unit_size):
        """Sets the unit_size of this IPurchaseOrderLineByFilter.


        :param unit_size: The unit_size of this IPurchaseOrderLineByFilter.  # noqa: E501
        :type: int
        """

        self._unit_size = unit_size

    @property
    def net_cost_amount(self):
        """Gets the net_cost_amount of this IPurchaseOrderLineByFilter.  # noqa: E501


        :return: The net_cost_amount of this IPurchaseOrderLineByFilter.  # noqa: E501
        :rtype: float
        """
        return self._net_cost_amount

    @net_cost_amount.setter
    def net_cost_amount(self, net_cost_amount):
        """Sets the net_cost_amount of this IPurchaseOrderLineByFilter.


        :param net_cost_amount: The net_cost_amount of this IPurchaseOrderLineByFilter.  # noqa: E501
        :type: float
        """

        self._net_cost_amount = net_cost_amount

    @property
    def net_cost_currency(self):
        """Gets the net_cost_currency of this IPurchaseOrderLineByFilter.  # noqa: E501


        :return: The net_cost_currency of this IPurchaseOrderLineByFilter.  # noqa: E501
        :rtype: str
        """
        return self._net_cost_currency

    @net_cost_currency.setter
    def net_cost_currency(self, net_cost_currency):
        """Sets the net_cost_currency of this IPurchaseOrderLineByFilter.


        :param net_cost_currency: The net_cost_currency of this IPurchaseOrderLineByFilter.  # noqa: E501
        :type: str
        """

        self._net_cost_currency = net_cost_currency

    @property
    def list_price_amount(self):
        """Gets the list_price_amount of this IPurchaseOrderLineByFilter.  # noqa: E501


        :return: The list_price_amount of this IPurchaseOrderLineByFilter.  # noqa: E501
        :rtype: float
        """
        return self._list_price_amount

    @list_price_amount.setter
    def list_price_amount(self, list_price_amount):
        """Sets the list_price_amount of this IPurchaseOrderLineByFilter.


        :param list_price_amount: The list_price_amount of this IPurchaseOrderLineByFilter.  # noqa: E501
        :type: float
        """

        self._list_price_amount = list_price_amount

    @property
    def created_at(self):
        """Gets the created_at of this IPurchaseOrderLineByFilter.  # noqa: E501


        :return: The created_at of this IPurchaseOrderLineByFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this IPurchaseOrderLineByFilter.


        :param created_at: The created_at of this IPurchaseOrderLineByFilter.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this IPurchaseOrderLineByFilter.  # noqa: E501


        :return: The updated_at of this IPurchaseOrderLineByFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this IPurchaseOrderLineByFilter.


        :param updated_at: The updated_at of this IPurchaseOrderLineByFilter.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def acknowledged_date(self):
        """Gets the acknowledged_date of this IPurchaseOrderLineByFilter.  # noqa: E501


        :return: The acknowledged_date of this IPurchaseOrderLineByFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._acknowledged_date

    @acknowledged_date.setter
    def acknowledged_date(self, acknowledged_date):
        """Sets the acknowledged_date of this IPurchaseOrderLineByFilter.


        :param acknowledged_date: The acknowledged_date of this IPurchaseOrderLineByFilter.  # noqa: E501
        :type: datetime
        """

        self._acknowledged_date = acknowledged_date

    @property
    def line_total(self):
        """Gets the line_total of this IPurchaseOrderLineByFilter.  # noqa: E501


        :return: The line_total of this IPurchaseOrderLineByFilter.  # noqa: E501
        :rtype: float
        """
        return self._line_total

    @line_total.setter
    def line_total(self, line_total):
        """Sets the line_total of this IPurchaseOrderLineByFilter.


        :param line_total: The line_total of this IPurchaseOrderLineByFilter.  # noqa: E501
        :type: float
        """

        self._line_total = line_total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPurchaseOrderLineByFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPurchaseOrderLineByFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
