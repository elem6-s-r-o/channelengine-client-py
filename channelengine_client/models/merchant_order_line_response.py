# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants  # noqa: E501

    OpenAPI spec version: 2.17.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MerchantOrderLineResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'channel_order_line_no': 'str',
        'status': 'OrderStatusView',
        'is_fulfillment_by_marketplace': 'bool',
        'gtin': 'str',
        'description': 'str',
        'stock_location': 'MerchantStockLocationResponse',
        'unit_vat': 'float',
        'line_total_incl_vat': 'float',
        'line_vat': 'float',
        'original_unit_price_incl_vat': 'float',
        'original_unit_vat': 'float',
        'original_line_total_incl_vat': 'float',
        'original_line_vat': 'float',
        'original_fee_fixed': 'float',
        'bundle_product_merchant_product_no': 'str',
        'juris_code': 'str',
        'juris_name': 'str',
        'vat_rate': 'float',
        'unit_price_excl_vat': 'float',
        'line_total_excl_vat': 'float',
        'original_unit_price_excl_vat': 'float',
        'original_line_total_excl_vat': 'float',
        'extra_data': 'list[MerchantOrderLineExtraDataResponse]',
        'channel_product_no': 'str',
        'merchant_product_no': 'str',
        'quantity': 'int',
        'cancellation_requested_quantity': 'int',
        'unit_price_incl_vat': 'float',
        'fee_fixed': 'float',
        'fee_rate': 'float',
        'condition': 'Condition',
        'exact_delivery_date': 'datetime',
        'expected_delivery_date': 'datetime',
        'latest_delivery_date': 'datetime',
        'expected_shipment_date': 'datetime',
        'latest_shipment_date': 'datetime'
    }

    attribute_map = {
        'id': 'Id',
        'channel_order_line_no': 'ChannelOrderLineNo',
        'status': 'Status',
        'is_fulfillment_by_marketplace': 'IsFulfillmentByMarketplace',
        'gtin': 'Gtin',
        'description': 'Description',
        'stock_location': 'StockLocation',
        'unit_vat': 'UnitVat',
        'line_total_incl_vat': 'LineTotalInclVat',
        'line_vat': 'LineVat',
        'original_unit_price_incl_vat': 'OriginalUnitPriceInclVat',
        'original_unit_vat': 'OriginalUnitVat',
        'original_line_total_incl_vat': 'OriginalLineTotalInclVat',
        'original_line_vat': 'OriginalLineVat',
        'original_fee_fixed': 'OriginalFeeFixed',
        'bundle_product_merchant_product_no': 'BundleProductMerchantProductNo',
        'juris_code': 'JurisCode',
        'juris_name': 'JurisName',
        'vat_rate': 'VatRate',
        'unit_price_excl_vat': 'UnitPriceExclVat',
        'line_total_excl_vat': 'LineTotalExclVat',
        'original_unit_price_excl_vat': 'OriginalUnitPriceExclVat',
        'original_line_total_excl_vat': 'OriginalLineTotalExclVat',
        'extra_data': 'ExtraData',
        'channel_product_no': 'ChannelProductNo',
        'merchant_product_no': 'MerchantProductNo',
        'quantity': 'Quantity',
        'cancellation_requested_quantity': 'CancellationRequestedQuantity',
        'unit_price_incl_vat': 'UnitPriceInclVat',
        'fee_fixed': 'FeeFixed',
        'fee_rate': 'FeeRate',
        'condition': 'Condition',
        'exact_delivery_date': 'ExactDeliveryDate',
        'expected_delivery_date': 'ExpectedDeliveryDate',
        'latest_delivery_date': 'LatestDeliveryDate',
        'expected_shipment_date': 'ExpectedShipmentDate',
        'latest_shipment_date': 'LatestShipmentDate'
    }

    def __init__(self, id=None, channel_order_line_no=None, status=None, is_fulfillment_by_marketplace=None, gtin=None, description=None, stock_location=None, unit_vat=None, line_total_incl_vat=None, line_vat=None, original_unit_price_incl_vat=None, original_unit_vat=None, original_line_total_incl_vat=None, original_line_vat=None, original_fee_fixed=None, bundle_product_merchant_product_no=None, juris_code=None, juris_name=None, vat_rate=None, unit_price_excl_vat=None, line_total_excl_vat=None, original_unit_price_excl_vat=None, original_line_total_excl_vat=None, extra_data=None, channel_product_no=None, merchant_product_no=None, quantity=None, cancellation_requested_quantity=None, unit_price_incl_vat=None, fee_fixed=None, fee_rate=None, condition=None, exact_delivery_date=None, expected_delivery_date=None, latest_delivery_date=None, expected_shipment_date=None, latest_shipment_date=None):  # noqa: E501
        """MerchantOrderLineResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._channel_order_line_no = None
        self._status = None
        self._is_fulfillment_by_marketplace = None
        self._gtin = None
        self._description = None
        self._stock_location = None
        self._unit_vat = None
        self._line_total_incl_vat = None
        self._line_vat = None
        self._original_unit_price_incl_vat = None
        self._original_unit_vat = None
        self._original_line_total_incl_vat = None
        self._original_line_vat = None
        self._original_fee_fixed = None
        self._bundle_product_merchant_product_no = None
        self._juris_code = None
        self._juris_name = None
        self._vat_rate = None
        self._unit_price_excl_vat = None
        self._line_total_excl_vat = None
        self._original_unit_price_excl_vat = None
        self._original_line_total_excl_vat = None
        self._extra_data = None
        self._channel_product_no = None
        self._merchant_product_no = None
        self._quantity = None
        self._cancellation_requested_quantity = None
        self._unit_price_incl_vat = None
        self._fee_fixed = None
        self._fee_rate = None
        self._condition = None
        self._exact_delivery_date = None
        self._expected_delivery_date = None
        self._latest_delivery_date = None
        self._expected_shipment_date = None
        self._latest_shipment_date = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if channel_order_line_no is not None:
            self.channel_order_line_no = channel_order_line_no
        if status is not None:
            self.status = status
        if is_fulfillment_by_marketplace is not None:
            self.is_fulfillment_by_marketplace = is_fulfillment_by_marketplace
        if gtin is not None:
            self.gtin = gtin
        if description is not None:
            self.description = description
        if stock_location is not None:
            self.stock_location = stock_location
        if unit_vat is not None:
            self.unit_vat = unit_vat
        if line_total_incl_vat is not None:
            self.line_total_incl_vat = line_total_incl_vat
        if line_vat is not None:
            self.line_vat = line_vat
        if original_unit_price_incl_vat is not None:
            self.original_unit_price_incl_vat = original_unit_price_incl_vat
        if original_unit_vat is not None:
            self.original_unit_vat = original_unit_vat
        if original_line_total_incl_vat is not None:
            self.original_line_total_incl_vat = original_line_total_incl_vat
        if original_line_vat is not None:
            self.original_line_vat = original_line_vat
        if original_fee_fixed is not None:
            self.original_fee_fixed = original_fee_fixed
        if bundle_product_merchant_product_no is not None:
            self.bundle_product_merchant_product_no = bundle_product_merchant_product_no
        if juris_code is not None:
            self.juris_code = juris_code
        if juris_name is not None:
            self.juris_name = juris_name
        if vat_rate is not None:
            self.vat_rate = vat_rate
        if unit_price_excl_vat is not None:
            self.unit_price_excl_vat = unit_price_excl_vat
        if line_total_excl_vat is not None:
            self.line_total_excl_vat = line_total_excl_vat
        if original_unit_price_excl_vat is not None:
            self.original_unit_price_excl_vat = original_unit_price_excl_vat
        if original_line_total_excl_vat is not None:
            self.original_line_total_excl_vat = original_line_total_excl_vat
        if extra_data is not None:
            self.extra_data = extra_data
        self.channel_product_no = channel_product_no
        if merchant_product_no is not None:
            self.merchant_product_no = merchant_product_no
        self.quantity = quantity
        if cancellation_requested_quantity is not None:
            self.cancellation_requested_quantity = cancellation_requested_quantity
        self.unit_price_incl_vat = unit_price_incl_vat
        if fee_fixed is not None:
            self.fee_fixed = fee_fixed
        if fee_rate is not None:
            self.fee_rate = fee_rate
        if condition is not None:
            self.condition = condition
        if exact_delivery_date is not None:
            self.exact_delivery_date = exact_delivery_date
        if expected_delivery_date is not None:
            self.expected_delivery_date = expected_delivery_date
        if latest_delivery_date is not None:
            self.latest_delivery_date = latest_delivery_date
        if expected_shipment_date is not None:
            self.expected_shipment_date = expected_shipment_date
        if latest_shipment_date is not None:
            self.latest_shipment_date = latest_shipment_date

    @property
    def id(self):
        """Gets the id of this MerchantOrderLineResponse.  # noqa: E501

        The unique identifier used by ChannelEngine.  # noqa: E501

        :return: The id of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MerchantOrderLineResponse.

        The unique identifier used by ChannelEngine.  # noqa: E501

        :param id: The id of this MerchantOrderLineResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def channel_order_line_no(self):
        """Gets the channel_order_line_no of this MerchantOrderLineResponse.  # noqa: E501

        The order line reference used by the channel.  # noqa: E501

        :return: The channel_order_line_no of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: str
        """
        return self._channel_order_line_no

    @channel_order_line_no.setter
    def channel_order_line_no(self, channel_order_line_no):
        """Sets the channel_order_line_no of this MerchantOrderLineResponse.

        The order line reference used by the channel.  # noqa: E501

        :param channel_order_line_no: The channel_order_line_no of this MerchantOrderLineResponse.  # noqa: E501
        :type: str
        """

        self._channel_order_line_no = channel_order_line_no

    @property
    def status(self):
        """Gets the status of this MerchantOrderLineResponse.  # noqa: E501


        :return: The status of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: OrderStatusView
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MerchantOrderLineResponse.


        :param status: The status of this MerchantOrderLineResponse.  # noqa: E501
        :type: OrderStatusView
        """

        self._status = status

    @property
    def is_fulfillment_by_marketplace(self):
        """Gets the is_fulfillment_by_marketplace of this MerchantOrderLineResponse.  # noqa: E501

        Is the order fulfilled by the marketplace (amazon: FBA, bol: LVB, etc.)?.  # noqa: E501

        :return: The is_fulfillment_by_marketplace of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_fulfillment_by_marketplace

    @is_fulfillment_by_marketplace.setter
    def is_fulfillment_by_marketplace(self, is_fulfillment_by_marketplace):
        """Sets the is_fulfillment_by_marketplace of this MerchantOrderLineResponse.

        Is the order fulfilled by the marketplace (amazon: FBA, bol: LVB, etc.)?.  # noqa: E501

        :param is_fulfillment_by_marketplace: The is_fulfillment_by_marketplace of this MerchantOrderLineResponse.  # noqa: E501
        :type: bool
        """

        self._is_fulfillment_by_marketplace = is_fulfillment_by_marketplace

    @property
    def gtin(self):
        """Gets the gtin of this MerchantOrderLineResponse.  # noqa: E501

        Either the GTIN (EAN, ISBN, UPC etc) provided by the channel, or the the GTIN belonging to the MerchantProductNo in ChannelEngine.  # noqa: E501

        :return: The gtin of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: str
        """
        return self._gtin

    @gtin.setter
    def gtin(self, gtin):
        """Sets the gtin of this MerchantOrderLineResponse.

        Either the GTIN (EAN, ISBN, UPC etc) provided by the channel, or the the GTIN belonging to the MerchantProductNo in ChannelEngine.  # noqa: E501

        :param gtin: The gtin of this MerchantOrderLineResponse.  # noqa: E501
        :type: str
        """

        self._gtin = gtin

    @property
    def description(self):
        """Gets the description of this MerchantOrderLineResponse.  # noqa: E501

        The product description (or title) provided by the channel.  # noqa: E501

        :return: The description of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MerchantOrderLineResponse.

        The product description (or title) provided by the channel.  # noqa: E501

        :param description: The description of this MerchantOrderLineResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def stock_location(self):
        """Gets the stock_location of this MerchantOrderLineResponse.  # noqa: E501


        :return: The stock_location of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: MerchantStockLocationResponse
        """
        return self._stock_location

    @stock_location.setter
    def stock_location(self, stock_location):
        """Sets the stock_location of this MerchantOrderLineResponse.


        :param stock_location: The stock_location of this MerchantOrderLineResponse.  # noqa: E501
        :type: MerchantStockLocationResponse
        """

        self._stock_location = stock_location

    @property
    def unit_vat(self):
        """Gets the unit_vat of this MerchantOrderLineResponse.  # noqa: E501

        The total amount of VAT charged over the value of a single unit of the ordered product  (in the shop's base currency calculated using the exchange rate at the time of ordering).  # noqa: E501

        :return: The unit_vat of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: float
        """
        return self._unit_vat

    @unit_vat.setter
    def unit_vat(self, unit_vat):
        """Sets the unit_vat of this MerchantOrderLineResponse.

        The total amount of VAT charged over the value of a single unit of the ordered product  (in the shop's base currency calculated using the exchange rate at the time of ordering).  # noqa: E501

        :param unit_vat: The unit_vat of this MerchantOrderLineResponse.  # noqa: E501
        :type: float
        """

        self._unit_vat = unit_vat

    @property
    def line_total_incl_vat(self):
        """Gets the line_total_incl_vat of this MerchantOrderLineResponse.  # noqa: E501

        The total value of the order line (quantity * unit price) including VAT  (in the shop's base currency calculated using the exchange rate at the time of ordering).  # noqa: E501

        :return: The line_total_incl_vat of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: float
        """
        return self._line_total_incl_vat

    @line_total_incl_vat.setter
    def line_total_incl_vat(self, line_total_incl_vat):
        """Sets the line_total_incl_vat of this MerchantOrderLineResponse.

        The total value of the order line (quantity * unit price) including VAT  (in the shop's base currency calculated using the exchange rate at the time of ordering).  # noqa: E501

        :param line_total_incl_vat: The line_total_incl_vat of this MerchantOrderLineResponse.  # noqa: E501
        :type: float
        """

        self._line_total_incl_vat = line_total_incl_vat

    @property
    def line_vat(self):
        """Gets the line_vat of this MerchantOrderLineResponse.  # noqa: E501

        The total amount of VAT charged over the total value of the order line (quantity * unit price)  (in the shop's base currency calculated using the exchange rate at the time of ordering).  # noqa: E501

        :return: The line_vat of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: float
        """
        return self._line_vat

    @line_vat.setter
    def line_vat(self, line_vat):
        """Sets the line_vat of this MerchantOrderLineResponse.

        The total amount of VAT charged over the total value of the order line (quantity * unit price)  (in the shop's base currency calculated using the exchange rate at the time of ordering).  # noqa: E501

        :param line_vat: The line_vat of this MerchantOrderLineResponse.  # noqa: E501
        :type: float
        """

        self._line_vat = line_vat

    @property
    def original_unit_price_incl_vat(self):
        """Gets the original_unit_price_incl_vat of this MerchantOrderLineResponse.  # noqa: E501

        The value of a single unit of the ordered product including VAT  (in the currency in which the order was paid for, see CurrencyCode).  # noqa: E501

        :return: The original_unit_price_incl_vat of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: float
        """
        return self._original_unit_price_incl_vat

    @original_unit_price_incl_vat.setter
    def original_unit_price_incl_vat(self, original_unit_price_incl_vat):
        """Sets the original_unit_price_incl_vat of this MerchantOrderLineResponse.

        The value of a single unit of the ordered product including VAT  (in the currency in which the order was paid for, see CurrencyCode).  # noqa: E501

        :param original_unit_price_incl_vat: The original_unit_price_incl_vat of this MerchantOrderLineResponse.  # noqa: E501
        :type: float
        """

        self._original_unit_price_incl_vat = original_unit_price_incl_vat

    @property
    def original_unit_vat(self):
        """Gets the original_unit_vat of this MerchantOrderLineResponse.  # noqa: E501

        The total amount of VAT charged over the value of a single unit of the ordered product  (in the currency in which the order was paid for, see CurrencyCode).  # noqa: E501

        :return: The original_unit_vat of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: float
        """
        return self._original_unit_vat

    @original_unit_vat.setter
    def original_unit_vat(self, original_unit_vat):
        """Sets the original_unit_vat of this MerchantOrderLineResponse.

        The total amount of VAT charged over the value of a single unit of the ordered product  (in the currency in which the order was paid for, see CurrencyCode).  # noqa: E501

        :param original_unit_vat: The original_unit_vat of this MerchantOrderLineResponse.  # noqa: E501
        :type: float
        """

        self._original_unit_vat = original_unit_vat

    @property
    def original_line_total_incl_vat(self):
        """Gets the original_line_total_incl_vat of this MerchantOrderLineResponse.  # noqa: E501

        The total value of the order line (quantity * unit price) including VAT  (in the currency in which the order was paid for, see CurrencyCode).  # noqa: E501

        :return: The original_line_total_incl_vat of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: float
        """
        return self._original_line_total_incl_vat

    @original_line_total_incl_vat.setter
    def original_line_total_incl_vat(self, original_line_total_incl_vat):
        """Sets the original_line_total_incl_vat of this MerchantOrderLineResponse.

        The total value of the order line (quantity * unit price) including VAT  (in the currency in which the order was paid for, see CurrencyCode).  # noqa: E501

        :param original_line_total_incl_vat: The original_line_total_incl_vat of this MerchantOrderLineResponse.  # noqa: E501
        :type: float
        """

        self._original_line_total_incl_vat = original_line_total_incl_vat

    @property
    def original_line_vat(self):
        """Gets the original_line_vat of this MerchantOrderLineResponse.  # noqa: E501

        The total amount of VAT charged over the total value of the order line (quantity * unit price)  (in the currency in which the order was paid for, see CurrencyCode).  # noqa: E501

        :return: The original_line_vat of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: float
        """
        return self._original_line_vat

    @original_line_vat.setter
    def original_line_vat(self, original_line_vat):
        """Sets the original_line_vat of this MerchantOrderLineResponse.

        The total amount of VAT charged over the total value of the order line (quantity * unit price)  (in the currency in which the order was paid for, see CurrencyCode).  # noqa: E501

        :param original_line_vat: The original_line_vat of this MerchantOrderLineResponse.  # noqa: E501
        :type: float
        """

        self._original_line_vat = original_line_vat

    @property
    def original_fee_fixed(self):
        """Gets the original_fee_fixed of this MerchantOrderLineResponse.  # noqa: E501

        A percentage fee that is charged by the Channel for this orderline.  This fee rate is based on the currency of client  This field is optional, send 0 if not applicable.  # noqa: E501

        :return: The original_fee_fixed of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: float
        """
        return self._original_fee_fixed

    @original_fee_fixed.setter
    def original_fee_fixed(self, original_fee_fixed):
        """Sets the original_fee_fixed of this MerchantOrderLineResponse.

        A percentage fee that is charged by the Channel for this orderline.  This fee rate is based on the currency of client  This field is optional, send 0 if not applicable.  # noqa: E501

        :param original_fee_fixed: The original_fee_fixed of this MerchantOrderLineResponse.  # noqa: E501
        :type: float
        """

        self._original_fee_fixed = original_fee_fixed

    @property
    def bundle_product_merchant_product_no(self):
        """Gets the bundle_product_merchant_product_no of this MerchantOrderLineResponse.  # noqa: E501

        If the product is ordered part of a bundle, this field contains the MerchantProductNo of  the product bundle.  # noqa: E501

        :return: The bundle_product_merchant_product_no of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: str
        """
        return self._bundle_product_merchant_product_no

    @bundle_product_merchant_product_no.setter
    def bundle_product_merchant_product_no(self, bundle_product_merchant_product_no):
        """Sets the bundle_product_merchant_product_no of this MerchantOrderLineResponse.

        If the product is ordered part of a bundle, this field contains the MerchantProductNo of  the product bundle.  # noqa: E501

        :param bundle_product_merchant_product_no: The bundle_product_merchant_product_no of this MerchantOrderLineResponse.  # noqa: E501
        :type: str
        """

        self._bundle_product_merchant_product_no = bundle_product_merchant_product_no

    @property
    def juris_code(self):
        """Gets the juris_code of this MerchantOrderLineResponse.  # noqa: E501

        State assigned code identifying the jurisdiction.  # noqa: E501

        :return: The juris_code of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: str
        """
        return self._juris_code

    @juris_code.setter
    def juris_code(self, juris_code):
        """Sets the juris_code of this MerchantOrderLineResponse.

        State assigned code identifying the jurisdiction.  # noqa: E501

        :param juris_code: The juris_code of this MerchantOrderLineResponse.  # noqa: E501
        :type: str
        """

        self._juris_code = juris_code

    @property
    def juris_name(self):
        """Gets the juris_name of this MerchantOrderLineResponse.  # noqa: E501

        Name of a tax jurisdiction.  # noqa: E501

        :return: The juris_name of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: str
        """
        return self._juris_name

    @juris_name.setter
    def juris_name(self, juris_name):
        """Sets the juris_name of this MerchantOrderLineResponse.

        Name of a tax jurisdiction.  # noqa: E501

        :param juris_name: The juris_name of this MerchantOrderLineResponse.  # noqa: E501
        :type: str
        """

        self._juris_name = juris_name

    @property
    def vat_rate(self):
        """Gets the vat_rate of this MerchantOrderLineResponse.  # noqa: E501

        VAT rate of the orderline.  # noqa: E501

        :return: The vat_rate of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: float
        """
        return self._vat_rate

    @vat_rate.setter
    def vat_rate(self, vat_rate):
        """Sets the vat_rate of this MerchantOrderLineResponse.

        VAT rate of the orderline.  # noqa: E501

        :param vat_rate: The vat_rate of this MerchantOrderLineResponse.  # noqa: E501
        :type: float
        """

        self._vat_rate = vat_rate

    @property
    def unit_price_excl_vat(self):
        """Gets the unit_price_excl_vat of this MerchantOrderLineResponse.  # noqa: E501


        :return: The unit_price_excl_vat of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: float
        """
        return self._unit_price_excl_vat

    @unit_price_excl_vat.setter
    def unit_price_excl_vat(self, unit_price_excl_vat):
        """Sets the unit_price_excl_vat of this MerchantOrderLineResponse.


        :param unit_price_excl_vat: The unit_price_excl_vat of this MerchantOrderLineResponse.  # noqa: E501
        :type: float
        """

        self._unit_price_excl_vat = unit_price_excl_vat

    @property
    def line_total_excl_vat(self):
        """Gets the line_total_excl_vat of this MerchantOrderLineResponse.  # noqa: E501


        :return: The line_total_excl_vat of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: float
        """
        return self._line_total_excl_vat

    @line_total_excl_vat.setter
    def line_total_excl_vat(self, line_total_excl_vat):
        """Sets the line_total_excl_vat of this MerchantOrderLineResponse.


        :param line_total_excl_vat: The line_total_excl_vat of this MerchantOrderLineResponse.  # noqa: E501
        :type: float
        """

        self._line_total_excl_vat = line_total_excl_vat

    @property
    def original_unit_price_excl_vat(self):
        """Gets the original_unit_price_excl_vat of this MerchantOrderLineResponse.  # noqa: E501


        :return: The original_unit_price_excl_vat of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: float
        """
        return self._original_unit_price_excl_vat

    @original_unit_price_excl_vat.setter
    def original_unit_price_excl_vat(self, original_unit_price_excl_vat):
        """Sets the original_unit_price_excl_vat of this MerchantOrderLineResponse.


        :param original_unit_price_excl_vat: The original_unit_price_excl_vat of this MerchantOrderLineResponse.  # noqa: E501
        :type: float
        """

        self._original_unit_price_excl_vat = original_unit_price_excl_vat

    @property
    def original_line_total_excl_vat(self):
        """Gets the original_line_total_excl_vat of this MerchantOrderLineResponse.  # noqa: E501


        :return: The original_line_total_excl_vat of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: float
        """
        return self._original_line_total_excl_vat

    @original_line_total_excl_vat.setter
    def original_line_total_excl_vat(self, original_line_total_excl_vat):
        """Sets the original_line_total_excl_vat of this MerchantOrderLineResponse.


        :param original_line_total_excl_vat: The original_line_total_excl_vat of this MerchantOrderLineResponse.  # noqa: E501
        :type: float
        """

        self._original_line_total_excl_vat = original_line_total_excl_vat

    @property
    def extra_data(self):
        """Gets the extra_data of this MerchantOrderLineResponse.  # noqa: E501


        :return: The extra_data of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: list[MerchantOrderLineExtraDataResponse]
        """
        return self._extra_data

    @extra_data.setter
    def extra_data(self, extra_data):
        """Sets the extra_data of this MerchantOrderLineResponse.


        :param extra_data: The extra_data of this MerchantOrderLineResponse.  # noqa: E501
        :type: list[MerchantOrderLineExtraDataResponse]
        """

        self._extra_data = extra_data

    @property
    def channel_product_no(self):
        """Gets the channel_product_no of this MerchantOrderLineResponse.  # noqa: E501

        The unique product reference used by the channel.  # noqa: E501

        :return: The channel_product_no of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: str
        """
        return self._channel_product_no

    @channel_product_no.setter
    def channel_product_no(self, channel_product_no):
        """Sets the channel_product_no of this MerchantOrderLineResponse.

        The unique product reference used by the channel.  # noqa: E501

        :param channel_product_no: The channel_product_no of this MerchantOrderLineResponse.  # noqa: E501
        :type: str
        """
        if channel_product_no is None:
            raise ValueError("Invalid value for `channel_product_no`, must not be `None`")  # noqa: E501

        self._channel_product_no = channel_product_no

    @property
    def merchant_product_no(self):
        """Gets the merchant_product_no of this MerchantOrderLineResponse.  # noqa: E501

        The unique product reference used by the merchant.  # noqa: E501

        :return: The merchant_product_no of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: str
        """
        return self._merchant_product_no

    @merchant_product_no.setter
    def merchant_product_no(self, merchant_product_no):
        """Sets the merchant_product_no of this MerchantOrderLineResponse.

        The unique product reference used by the merchant.  # noqa: E501

        :param merchant_product_no: The merchant_product_no of this MerchantOrderLineResponse.  # noqa: E501
        :type: str
        """

        self._merchant_product_no = merchant_product_no

    @property
    def quantity(self):
        """Gets the quantity of this MerchantOrderLineResponse.  # noqa: E501

        The number of items of the product.  # noqa: E501

        :return: The quantity of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this MerchantOrderLineResponse.

        The number of items of the product.  # noqa: E501

        :param quantity: The quantity of this MerchantOrderLineResponse.  # noqa: E501
        :type: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def cancellation_requested_quantity(self):
        """Gets the cancellation_requested_quantity of this MerchantOrderLineResponse.  # noqa: E501

        The number of items for which cancellation was requested by the customer.  Some channels allow a customer to cancel an order until it has been shipped.  When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation.  Use this field to check whether it is still possible to cancel the order. If this is the case, submit a cancellation to ChannelEngine.  # noqa: E501

        :return: The cancellation_requested_quantity of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: int
        """
        return self._cancellation_requested_quantity

    @cancellation_requested_quantity.setter
    def cancellation_requested_quantity(self, cancellation_requested_quantity):
        """Sets the cancellation_requested_quantity of this MerchantOrderLineResponse.

        The number of items for which cancellation was requested by the customer.  Some channels allow a customer to cancel an order until it has been shipped.  When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation.  Use this field to check whether it is still possible to cancel the order. If this is the case, submit a cancellation to ChannelEngine.  # noqa: E501

        :param cancellation_requested_quantity: The cancellation_requested_quantity of this MerchantOrderLineResponse.  # noqa: E501
        :type: int
        """

        self._cancellation_requested_quantity = cancellation_requested_quantity

    @property
    def unit_price_incl_vat(self):
        """Gets the unit_price_incl_vat of this MerchantOrderLineResponse.  # noqa: E501

        The value of a single unit of the ordered product including VAT  (in the shop's base currency calculated using the exchange rate at the time of ordering).  # noqa: E501

        :return: The unit_price_incl_vat of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: float
        """
        return self._unit_price_incl_vat

    @unit_price_incl_vat.setter
    def unit_price_incl_vat(self, unit_price_incl_vat):
        """Sets the unit_price_incl_vat of this MerchantOrderLineResponse.

        The value of a single unit of the ordered product including VAT  (in the shop's base currency calculated using the exchange rate at the time of ordering).  # noqa: E501

        :param unit_price_incl_vat: The unit_price_incl_vat of this MerchantOrderLineResponse.  # noqa: E501
        :type: float
        """
        if unit_price_incl_vat is None:
            raise ValueError("Invalid value for `unit_price_incl_vat`, must not be `None`")  # noqa: E501

        self._unit_price_incl_vat = unit_price_incl_vat

    @property
    def fee_fixed(self):
        """Gets the fee_fixed of this MerchantOrderLineResponse.  # noqa: E501

        A fixed fee that is charged by the Channel for this orderline.  This fee rate is based on the currency of the Channel  This field is optional, send 0 if not applicable.  # noqa: E501

        :return: The fee_fixed of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: float
        """
        return self._fee_fixed

    @fee_fixed.setter
    def fee_fixed(self, fee_fixed):
        """Sets the fee_fixed of this MerchantOrderLineResponse.

        A fixed fee that is charged by the Channel for this orderline.  This fee rate is based on the currency of the Channel  This field is optional, send 0 if not applicable.  # noqa: E501

        :param fee_fixed: The fee_fixed of this MerchantOrderLineResponse.  # noqa: E501
        :type: float
        """

        self._fee_fixed = fee_fixed

    @property
    def fee_rate(self):
        """Gets the fee_rate of this MerchantOrderLineResponse.  # noqa: E501

        A percentage fee that is charged by the Channel for this orderline.  This field is optional, send 0 if not applicable.  # noqa: E501

        :return: The fee_rate of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: float
        """
        return self._fee_rate

    @fee_rate.setter
    def fee_rate(self, fee_rate):
        """Sets the fee_rate of this MerchantOrderLineResponse.

        A percentage fee that is charged by the Channel for this orderline.  This field is optional, send 0 if not applicable.  # noqa: E501

        :param fee_rate: The fee_rate of this MerchantOrderLineResponse.  # noqa: E501
        :type: float
        """

        self._fee_rate = fee_rate

    @property
    def condition(self):
        """Gets the condition of this MerchantOrderLineResponse.  # noqa: E501


        :return: The condition of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: Condition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this MerchantOrderLineResponse.


        :param condition: The condition of this MerchantOrderLineResponse.  # noqa: E501
        :type: Condition
        """

        self._condition = condition

    @property
    def exact_delivery_date(self):
        """Gets the exact_delivery_date of this MerchantOrderLineResponse.  # noqa: E501

        The exact date when the order (line) must be delivered. Delivery cannot occur before or after this date.  This can be empty if the channel does not provide this info.  # noqa: E501

        :return: The exact_delivery_date of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._exact_delivery_date

    @exact_delivery_date.setter
    def exact_delivery_date(self, exact_delivery_date):
        """Sets the exact_delivery_date of this MerchantOrderLineResponse.

        The exact date when the order (line) must be delivered. Delivery cannot occur before or after this date.  This can be empty if the channel does not provide this info.  # noqa: E501

        :param exact_delivery_date: The exact_delivery_date of this MerchantOrderLineResponse.  # noqa: E501
        :type: datetime
        """

        self._exact_delivery_date = exact_delivery_date

    @property
    def expected_delivery_date(self):
        """Gets the expected_delivery_date of this MerchantOrderLineResponse.  # noqa: E501

        The date when the order should be delivered. This field must always contain a value, either the exact date or the latest possible date.  If this value is not set, the system defaults to using the order date plus two days as the expected delivery date.  This field is used for backwards compatibility.  # noqa: E501

        :return: The expected_delivery_date of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._expected_delivery_date

    @expected_delivery_date.setter
    def expected_delivery_date(self, expected_delivery_date):
        """Sets the expected_delivery_date of this MerchantOrderLineResponse.

        The date when the order should be delivered. This field must always contain a value, either the exact date or the latest possible date.  If this value is not set, the system defaults to using the order date plus two days as the expected delivery date.  This field is used for backwards compatibility.  # noqa: E501

        :param expected_delivery_date: The expected_delivery_date of this MerchantOrderLineResponse.  # noqa: E501
        :type: datetime
        """

        self._expected_delivery_date = expected_delivery_date

    @property
    def latest_delivery_date(self):
        """Gets the latest_delivery_date of this MerchantOrderLineResponse.  # noqa: E501

        The latest possible date when the order (line) must be delivered. Delivery can occur on or before this date, but not after.  This can be empty if the channel does not provide this info.  # noqa: E501

        :return: The latest_delivery_date of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._latest_delivery_date

    @latest_delivery_date.setter
    def latest_delivery_date(self, latest_delivery_date):
        """Sets the latest_delivery_date of this MerchantOrderLineResponse.

        The latest possible date when the order (line) must be delivered. Delivery can occur on or before this date, but not after.  This can be empty if the channel does not provide this info.  # noqa: E501

        :param latest_delivery_date: The latest_delivery_date of this MerchantOrderLineResponse.  # noqa: E501
        :type: datetime
        """

        self._latest_delivery_date = latest_delivery_date

    @property
    def expected_shipment_date(self):
        """Gets the expected_shipment_date of this MerchantOrderLineResponse.  # noqa: E501

        The date when when the order (line) should be shipped.  This can be empty if the channel does not provide this info.  # noqa: E501

        :return: The expected_shipment_date of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._expected_shipment_date

    @expected_shipment_date.setter
    def expected_shipment_date(self, expected_shipment_date):
        """Sets the expected_shipment_date of this MerchantOrderLineResponse.

        The date when when the order (line) should be shipped.  This can be empty if the channel does not provide this info.  # noqa: E501

        :param expected_shipment_date: The expected_shipment_date of this MerchantOrderLineResponse.  # noqa: E501
        :type: datetime
        """

        self._expected_shipment_date = expected_shipment_date

    @property
    def latest_shipment_date(self):
        """Gets the latest_shipment_date of this MerchantOrderLineResponse.  # noqa: E501

        The latest possible date when the order (line) must be shipped. Shipment can occur on or before this date, but not after.  This can be empty if the channel does not provide this info.  # noqa: E501

        :return: The latest_shipment_date of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._latest_shipment_date

    @latest_shipment_date.setter
    def latest_shipment_date(self, latest_shipment_date):
        """Sets the latest_shipment_date of this MerchantOrderLineResponse.

        The latest possible date when the order (line) must be shipped. Shipment can occur on or before this date, but not after.  This can be empty if the channel does not provide this info.  # noqa: E501

        :param latest_shipment_date: The latest_shipment_date of this MerchantOrderLineResponse.  # noqa: E501
        :type: datetime
        """

        self._latest_shipment_date = latest_shipment_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MerchantOrderLineResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MerchantOrderLineResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
