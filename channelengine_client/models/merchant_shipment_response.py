# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants  # noqa: E501

    OpenAPI spec version: 2.17.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MerchantShipmentResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'merchant_shipment_no': 'str',
        'merchant_order_no': 'str',
        'channel_shipment_no': 'str',
        'channel_order_no': 'str',
        'channel_id': 'int',
        'global_channel_id': 'int',
        'lines': 'list[MerchantShipmentLineResponse]',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'extra_data': 'dict(str, str)',
        'track_trace_no': 'str',
        'track_trace_url': 'str',
        'return_track_trace_no': 'str',
        'method': 'str',
        'shipped_from_country_code': 'str',
        'shipped_from_stock_location_id': 'int',
        'shipment_date': 'datetime'
    }

    attribute_map = {
        'merchant_shipment_no': 'MerchantShipmentNo',
        'merchant_order_no': 'MerchantOrderNo',
        'channel_shipment_no': 'ChannelShipmentNo',
        'channel_order_no': 'ChannelOrderNo',
        'channel_id': 'ChannelId',
        'global_channel_id': 'GlobalChannelId',
        'lines': 'Lines',
        'created_at': 'CreatedAt',
        'updated_at': 'UpdatedAt',
        'extra_data': 'ExtraData',
        'track_trace_no': 'TrackTraceNo',
        'track_trace_url': 'TrackTraceUrl',
        'return_track_trace_no': 'ReturnTrackTraceNo',
        'method': 'Method',
        'shipped_from_country_code': 'ShippedFromCountryCode',
        'shipped_from_stock_location_id': 'ShippedFromStockLocationId',
        'shipment_date': 'ShipmentDate'
    }

    def __init__(self, merchant_shipment_no=None, merchant_order_no=None, channel_shipment_no=None, channel_order_no=None, channel_id=None, global_channel_id=None, lines=None, created_at=None, updated_at=None, extra_data=None, track_trace_no=None, track_trace_url=None, return_track_trace_no=None, method=None, shipped_from_country_code=None, shipped_from_stock_location_id=None, shipment_date=None):  # noqa: E501
        """MerchantShipmentResponse - a model defined in Swagger"""  # noqa: E501
        self._merchant_shipment_no = None
        self._merchant_order_no = None
        self._channel_shipment_no = None
        self._channel_order_no = None
        self._channel_id = None
        self._global_channel_id = None
        self._lines = None
        self._created_at = None
        self._updated_at = None
        self._extra_data = None
        self._track_trace_no = None
        self._track_trace_url = None
        self._return_track_trace_no = None
        self._method = None
        self._shipped_from_country_code = None
        self._shipped_from_stock_location_id = None
        self._shipment_date = None
        self.discriminator = None
        self.merchant_shipment_no = merchant_shipment_no
        if merchant_order_no is not None:
            self.merchant_order_no = merchant_order_no
        if channel_shipment_no is not None:
            self.channel_shipment_no = channel_shipment_no
        if channel_order_no is not None:
            self.channel_order_no = channel_order_no
        if channel_id is not None:
            self.channel_id = channel_id
        if global_channel_id is not None:
            self.global_channel_id = global_channel_id
        if lines is not None:
            self.lines = lines
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if extra_data is not None:
            self.extra_data = extra_data
        if track_trace_no is not None:
            self.track_trace_no = track_trace_no
        if track_trace_url is not None:
            self.track_trace_url = track_trace_url
        if return_track_trace_no is not None:
            self.return_track_trace_no = return_track_trace_no
        if method is not None:
            self.method = method
        if shipped_from_country_code is not None:
            self.shipped_from_country_code = shipped_from_country_code
        if shipped_from_stock_location_id is not None:
            self.shipped_from_stock_location_id = shipped_from_stock_location_id
        if shipment_date is not None:
            self.shipment_date = shipment_date

    @property
    def merchant_shipment_no(self):
        """Gets the merchant_shipment_no of this MerchantShipmentResponse.  # noqa: E501

        The unique shipment reference used by the Merchant.  # noqa: E501

        :return: The merchant_shipment_no of this MerchantShipmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._merchant_shipment_no

    @merchant_shipment_no.setter
    def merchant_shipment_no(self, merchant_shipment_no):
        """Sets the merchant_shipment_no of this MerchantShipmentResponse.

        The unique shipment reference used by the Merchant.  # noqa: E501

        :param merchant_shipment_no: The merchant_shipment_no of this MerchantShipmentResponse.  # noqa: E501
        :type: str
        """
        if merchant_shipment_no is None:
            raise ValueError("Invalid value for `merchant_shipment_no`, must not be `None`")  # noqa: E501

        self._merchant_shipment_no = merchant_shipment_no

    @property
    def merchant_order_no(self):
        """Gets the merchant_order_no of this MerchantShipmentResponse.  # noqa: E501

        The unique order reference used by the Merchant.  # noqa: E501

        :return: The merchant_order_no of this MerchantShipmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._merchant_order_no

    @merchant_order_no.setter
    def merchant_order_no(self, merchant_order_no):
        """Sets the merchant_order_no of this MerchantShipmentResponse.

        The unique order reference used by the Merchant.  # noqa: E501

        :param merchant_order_no: The merchant_order_no of this MerchantShipmentResponse.  # noqa: E501
        :type: str
        """

        self._merchant_order_no = merchant_order_no

    @property
    def channel_shipment_no(self):
        """Gets the channel_shipment_no of this MerchantShipmentResponse.  # noqa: E501

        The unique shipment reference used by the Channel.  # noqa: E501

        :return: The channel_shipment_no of this MerchantShipmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._channel_shipment_no

    @channel_shipment_no.setter
    def channel_shipment_no(self, channel_shipment_no):
        """Sets the channel_shipment_no of this MerchantShipmentResponse.

        The unique shipment reference used by the Channel.  # noqa: E501

        :param channel_shipment_no: The channel_shipment_no of this MerchantShipmentResponse.  # noqa: E501
        :type: str
        """

        self._channel_shipment_no = channel_shipment_no

    @property
    def channel_order_no(self):
        """Gets the channel_order_no of this MerchantShipmentResponse.  # noqa: E501

        The unique order reference used by the Channel.  # noqa: E501

        :return: The channel_order_no of this MerchantShipmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._channel_order_no

    @channel_order_no.setter
    def channel_order_no(self, channel_order_no):
        """Sets the channel_order_no of this MerchantShipmentResponse.

        The unique order reference used by the Channel.  # noqa: E501

        :param channel_order_no: The channel_order_no of this MerchantShipmentResponse.  # noqa: E501
        :type: str
        """

        self._channel_order_no = channel_order_no

    @property
    def channel_id(self):
        """Gets the channel_id of this MerchantShipmentResponse.  # noqa: E501

        The unique ID of the channel for this specific environment/account.  # noqa: E501

        :return: The channel_id of this MerchantShipmentResponse.  # noqa: E501
        :rtype: int
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this MerchantShipmentResponse.

        The unique ID of the channel for this specific environment/account.  # noqa: E501

        :param channel_id: The channel_id of this MerchantShipmentResponse.  # noqa: E501
        :type: int
        """

        self._channel_id = channel_id

    @property
    def global_channel_id(self):
        """Gets the global_channel_id of this MerchantShipmentResponse.  # noqa: E501

        The unique ID of the channel across all of ChannelEngine.  # noqa: E501

        :return: The global_channel_id of this MerchantShipmentResponse.  # noqa: E501
        :rtype: int
        """
        return self._global_channel_id

    @global_channel_id.setter
    def global_channel_id(self, global_channel_id):
        """Sets the global_channel_id of this MerchantShipmentResponse.

        The unique ID of the channel across all of ChannelEngine.  # noqa: E501

        :param global_channel_id: The global_channel_id of this MerchantShipmentResponse.  # noqa: E501
        :type: int
        """

        self._global_channel_id = global_channel_id

    @property
    def lines(self):
        """Gets the lines of this MerchantShipmentResponse.  # noqa: E501


        :return: The lines of this MerchantShipmentResponse.  # noqa: E501
        :rtype: list[MerchantShipmentLineResponse]
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """Sets the lines of this MerchantShipmentResponse.


        :param lines: The lines of this MerchantShipmentResponse.  # noqa: E501
        :type: list[MerchantShipmentLineResponse]
        """

        self._lines = lines

    @property
    def created_at(self):
        """Gets the created_at of this MerchantShipmentResponse.  # noqa: E501

        The date at which the shipment was created in ChannelEngine.  # noqa: E501

        :return: The created_at of this MerchantShipmentResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MerchantShipmentResponse.

        The date at which the shipment was created in ChannelEngine.  # noqa: E501

        :param created_at: The created_at of this MerchantShipmentResponse.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this MerchantShipmentResponse.  # noqa: E501

        The date at which the shipment was last modified in ChannelEngine.  # noqa: E501

        :return: The updated_at of this MerchantShipmentResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MerchantShipmentResponse.

        The date at which the shipment was last modified in ChannelEngine.  # noqa: E501

        :param updated_at: The updated_at of this MerchantShipmentResponse.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def extra_data(self):
        """Gets the extra_data of this MerchantShipmentResponse.  # noqa: E501

        Extra data on the order. Each item must have an unqiue key  # noqa: E501

        :return: The extra_data of this MerchantShipmentResponse.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._extra_data

    @extra_data.setter
    def extra_data(self, extra_data):
        """Sets the extra_data of this MerchantShipmentResponse.

        Extra data on the order. Each item must have an unqiue key  # noqa: E501

        :param extra_data: The extra_data of this MerchantShipmentResponse.  # noqa: E501
        :type: dict(str, str)
        """

        self._extra_data = extra_data

    @property
    def track_trace_no(self):
        """Gets the track_trace_no of this MerchantShipmentResponse.  # noqa: E501

        The unique shipping reference used by the Shipping carrier (track&trace number).  # noqa: E501

        :return: The track_trace_no of this MerchantShipmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._track_trace_no

    @track_trace_no.setter
    def track_trace_no(self, track_trace_no):
        """Sets the track_trace_no of this MerchantShipmentResponse.

        The unique shipping reference used by the Shipping carrier (track&trace number).  # noqa: E501

        :param track_trace_no: The track_trace_no of this MerchantShipmentResponse.  # noqa: E501
        :type: str
        """

        self._track_trace_no = track_trace_no

    @property
    def track_trace_url(self):
        """Gets the track_trace_url of this MerchantShipmentResponse.  # noqa: E501

        A link to a page of the carrier where the customer can track the shipping of her package.  # noqa: E501

        :return: The track_trace_url of this MerchantShipmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._track_trace_url

    @track_trace_url.setter
    def track_trace_url(self, track_trace_url):
        """Sets the track_trace_url of this MerchantShipmentResponse.

        A link to a page of the carrier where the customer can track the shipping of her package.  # noqa: E501

        :param track_trace_url: The track_trace_url of this MerchantShipmentResponse.  # noqa: E501
        :type: str
        """

        self._track_trace_url = track_trace_url

    @property
    def return_track_trace_no(self):
        """Gets the return_track_trace_no of this MerchantShipmentResponse.  # noqa: E501

        The unique return shipping reference that may be used by the Shipping carrier (track & trace number) if the shipment is returned.  # noqa: E501

        :return: The return_track_trace_no of this MerchantShipmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._return_track_trace_no

    @return_track_trace_no.setter
    def return_track_trace_no(self, return_track_trace_no):
        """Sets the return_track_trace_no of this MerchantShipmentResponse.

        The unique return shipping reference that may be used by the Shipping carrier (track & trace number) if the shipment is returned.  # noqa: E501

        :param return_track_trace_no: The return_track_trace_no of this MerchantShipmentResponse.  # noqa: E501
        :type: str
        """

        self._return_track_trace_no = return_track_trace_no

    @property
    def method(self):
        """Gets the method of this MerchantShipmentResponse.  # noqa: E501

        Shipment method: the carrier used for shipping the package. E.g. DHL, postNL.  # noqa: E501

        :return: The method of this MerchantShipmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this MerchantShipmentResponse.

        Shipment method: the carrier used for shipping the package. E.g. DHL, postNL.  # noqa: E501

        :param method: The method of this MerchantShipmentResponse.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def shipped_from_country_code(self):
        """Gets the shipped_from_country_code of this MerchantShipmentResponse.  # noqa: E501

        The code of the country from where the package is being shipped.  # noqa: E501

        :return: The shipped_from_country_code of this MerchantShipmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._shipped_from_country_code

    @shipped_from_country_code.setter
    def shipped_from_country_code(self, shipped_from_country_code):
        """Sets the shipped_from_country_code of this MerchantShipmentResponse.

        The code of the country from where the package is being shipped.  # noqa: E501

        :param shipped_from_country_code: The shipped_from_country_code of this MerchantShipmentResponse.  # noqa: E501
        :type: str
        """

        self._shipped_from_country_code = shipped_from_country_code

    @property
    def shipped_from_stock_location_id(self):
        """Gets the shipped_from_stock_location_id of this MerchantShipmentResponse.  # noqa: E501

        The id of the stock location where you ship the package from  # noqa: E501

        :return: The shipped_from_stock_location_id of this MerchantShipmentResponse.  # noqa: E501
        :rtype: int
        """
        return self._shipped_from_stock_location_id

    @shipped_from_stock_location_id.setter
    def shipped_from_stock_location_id(self, shipped_from_stock_location_id):
        """Sets the shipped_from_stock_location_id of this MerchantShipmentResponse.

        The id of the stock location where you ship the package from  # noqa: E501

        :param shipped_from_stock_location_id: The shipped_from_stock_location_id of this MerchantShipmentResponse.  # noqa: E501
        :type: int
        """

        self._shipped_from_stock_location_id = shipped_from_stock_location_id

    @property
    def shipment_date(self):
        """Gets the shipment_date of this MerchantShipmentResponse.  # noqa: E501

        The date at which the shipment was originally created in the source system (if available).  # noqa: E501

        :return: The shipment_date of this MerchantShipmentResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._shipment_date

    @shipment_date.setter
    def shipment_date(self, shipment_date):
        """Sets the shipment_date of this MerchantShipmentResponse.

        The date at which the shipment was originally created in the source system (if available).  # noqa: E501

        :param shipment_date: The shipment_date of this MerchantShipmentResponse.  # noqa: E501
        :type: datetime
        """

        self._shipment_date = shipment_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MerchantShipmentResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MerchantShipmentResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
