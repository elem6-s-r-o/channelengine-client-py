# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants  # noqa: E501

    OpenAPI spec version: 2.17.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MerchantProductAttributeGroupWithLinkedChannelsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_attribute_group_id': 'int',
        'group_name': 'str',
        'linked_channels': 'list[MerchantProductAttributeGroupChannelInfoResponse]'
    }

    attribute_map = {
        'product_attribute_group_id': 'ProductAttributeGroupId',
        'group_name': 'GroupName',
        'linked_channels': 'LinkedChannels'
    }

    def __init__(self, product_attribute_group_id=None, group_name=None, linked_channels=None):  # noqa: E501
        """MerchantProductAttributeGroupWithLinkedChannelsResponse - a model defined in Swagger"""  # noqa: E501
        self._product_attribute_group_id = None
        self._group_name = None
        self._linked_channels = None
        self.discriminator = None
        if product_attribute_group_id is not None:
            self.product_attribute_group_id = product_attribute_group_id
        if group_name is not None:
            self.group_name = group_name
        if linked_channels is not None:
            self.linked_channels = linked_channels

    @property
    def product_attribute_group_id(self):
        """Gets the product_attribute_group_id of this MerchantProductAttributeGroupWithLinkedChannelsResponse.  # noqa: E501


        :return: The product_attribute_group_id of this MerchantProductAttributeGroupWithLinkedChannelsResponse.  # noqa: E501
        :rtype: int
        """
        return self._product_attribute_group_id

    @product_attribute_group_id.setter
    def product_attribute_group_id(self, product_attribute_group_id):
        """Sets the product_attribute_group_id of this MerchantProductAttributeGroupWithLinkedChannelsResponse.


        :param product_attribute_group_id: The product_attribute_group_id of this MerchantProductAttributeGroupWithLinkedChannelsResponse.  # noqa: E501
        :type: int
        """

        self._product_attribute_group_id = product_attribute_group_id

    @property
    def group_name(self):
        """Gets the group_name of this MerchantProductAttributeGroupWithLinkedChannelsResponse.  # noqa: E501


        :return: The group_name of this MerchantProductAttributeGroupWithLinkedChannelsResponse.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this MerchantProductAttributeGroupWithLinkedChannelsResponse.


        :param group_name: The group_name of this MerchantProductAttributeGroupWithLinkedChannelsResponse.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def linked_channels(self):
        """Gets the linked_channels of this MerchantProductAttributeGroupWithLinkedChannelsResponse.  # noqa: E501


        :return: The linked_channels of this MerchantProductAttributeGroupWithLinkedChannelsResponse.  # noqa: E501
        :rtype: list[MerchantProductAttributeGroupChannelInfoResponse]
        """
        return self._linked_channels

    @linked_channels.setter
    def linked_channels(self, linked_channels):
        """Sets the linked_channels of this MerchantProductAttributeGroupWithLinkedChannelsResponse.


        :param linked_channels: The linked_channels of this MerchantProductAttributeGroupWithLinkedChannelsResponse.  # noqa: E501
        :type: list[MerchantProductAttributeGroupChannelInfoResponse]
        """

        self._linked_channels = linked_channels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MerchantProductAttributeGroupWithLinkedChannelsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MerchantProductAttributeGroupWithLinkedChannelsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
