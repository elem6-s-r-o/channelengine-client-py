# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants  # noqa: E501

    OpenAPI spec version: 2.17.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IImportInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'import_containers': 'str',
        'international_commercial_terms': 'str',
        'method_of_payment': 'str',
        'port_of_delivery': 'str',
        'shipping_instructions': 'str',
        'deal_code': 'str'
    }

    attribute_map = {
        'import_containers': 'ImportContainers',
        'international_commercial_terms': 'InternationalCommercialTerms',
        'method_of_payment': 'MethodOfPayment',
        'port_of_delivery': 'PortOfDelivery',
        'shipping_instructions': 'ShippingInstructions',
        'deal_code': 'DealCode'
    }

    def __init__(self, import_containers=None, international_commercial_terms=None, method_of_payment=None, port_of_delivery=None, shipping_instructions=None, deal_code=None):  # noqa: E501
        """IImportInformation - a model defined in Swagger"""  # noqa: E501
        self._import_containers = None
        self._international_commercial_terms = None
        self._method_of_payment = None
        self._port_of_delivery = None
        self._shipping_instructions = None
        self._deal_code = None
        self.discriminator = None
        if import_containers is not None:
            self.import_containers = import_containers
        if international_commercial_terms is not None:
            self.international_commercial_terms = international_commercial_terms
        if method_of_payment is not None:
            self.method_of_payment = method_of_payment
        if port_of_delivery is not None:
            self.port_of_delivery = port_of_delivery
        if shipping_instructions is not None:
            self.shipping_instructions = shipping_instructions
        if deal_code is not None:
            self.deal_code = deal_code

    @property
    def import_containers(self):
        """Gets the import_containers of this IImportInformation.  # noqa: E501


        :return: The import_containers of this IImportInformation.  # noqa: E501
        :rtype: str
        """
        return self._import_containers

    @import_containers.setter
    def import_containers(self, import_containers):
        """Sets the import_containers of this IImportInformation.


        :param import_containers: The import_containers of this IImportInformation.  # noqa: E501
        :type: str
        """

        self._import_containers = import_containers

    @property
    def international_commercial_terms(self):
        """Gets the international_commercial_terms of this IImportInformation.  # noqa: E501


        :return: The international_commercial_terms of this IImportInformation.  # noqa: E501
        :rtype: str
        """
        return self._international_commercial_terms

    @international_commercial_terms.setter
    def international_commercial_terms(self, international_commercial_terms):
        """Sets the international_commercial_terms of this IImportInformation.


        :param international_commercial_terms: The international_commercial_terms of this IImportInformation.  # noqa: E501
        :type: str
        """

        self._international_commercial_terms = international_commercial_terms

    @property
    def method_of_payment(self):
        """Gets the method_of_payment of this IImportInformation.  # noqa: E501


        :return: The method_of_payment of this IImportInformation.  # noqa: E501
        :rtype: str
        """
        return self._method_of_payment

    @method_of_payment.setter
    def method_of_payment(self, method_of_payment):
        """Sets the method_of_payment of this IImportInformation.


        :param method_of_payment: The method_of_payment of this IImportInformation.  # noqa: E501
        :type: str
        """

        self._method_of_payment = method_of_payment

    @property
    def port_of_delivery(self):
        """Gets the port_of_delivery of this IImportInformation.  # noqa: E501


        :return: The port_of_delivery of this IImportInformation.  # noqa: E501
        :rtype: str
        """
        return self._port_of_delivery

    @port_of_delivery.setter
    def port_of_delivery(self, port_of_delivery):
        """Sets the port_of_delivery of this IImportInformation.


        :param port_of_delivery: The port_of_delivery of this IImportInformation.  # noqa: E501
        :type: str
        """

        self._port_of_delivery = port_of_delivery

    @property
    def shipping_instructions(self):
        """Gets the shipping_instructions of this IImportInformation.  # noqa: E501


        :return: The shipping_instructions of this IImportInformation.  # noqa: E501
        :rtype: str
        """
        return self._shipping_instructions

    @shipping_instructions.setter
    def shipping_instructions(self, shipping_instructions):
        """Sets the shipping_instructions of this IImportInformation.


        :param shipping_instructions: The shipping_instructions of this IImportInformation.  # noqa: E501
        :type: str
        """

        self._shipping_instructions = shipping_instructions

    @property
    def deal_code(self):
        """Gets the deal_code of this IImportInformation.  # noqa: E501


        :return: The deal_code of this IImportInformation.  # noqa: E501
        :rtype: str
        """
        return self._deal_code

    @deal_code.setter
    def deal_code(self, deal_code):
        """Sets the deal_code of this IImportInformation.


        :param deal_code: The deal_code of this IImportInformation.  # noqa: E501
        :type: str
        """

        self._deal_code = deal_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IImportInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IImportInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
