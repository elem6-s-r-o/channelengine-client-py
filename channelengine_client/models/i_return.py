# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants  # noqa: E501

    OpenAPI spec version: 2.17.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IReturn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lines': 'list[IReturnLine]',
        'id': 'int',
        'status': 'ModuleReturnStatus',
        'channel_export_status': 'ChannelExportStatus',
        'reason': 'ModuleReturnReason',
        'merchant_comment': 'str',
        'merchant_return_no': 'str',
        'channel_return_no': 'str',
        'channel_order_no': 'str',
        'created_by_type': 'CreatedByType',
        'return_date': 'datetime',
        'order_date': 'datetime',
        'external_batch_no': 'str',
        'channel_acknowledged_date': 'datetime',
        'merchant_acknowledged_date': 'datetime',
        'order_id': 'int',
        'channel_id': 'int',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'deleted_at': 'datetime'
    }

    attribute_map = {
        'lines': 'Lines',
        'id': 'Id',
        'status': 'Status',
        'channel_export_status': 'ChannelExportStatus',
        'reason': 'Reason',
        'merchant_comment': 'MerchantComment',
        'merchant_return_no': 'MerchantReturnNo',
        'channel_return_no': 'ChannelReturnNo',
        'channel_order_no': 'ChannelOrderNo',
        'created_by_type': 'CreatedByType',
        'return_date': 'ReturnDate',
        'order_date': 'OrderDate',
        'external_batch_no': 'ExternalBatchNo',
        'channel_acknowledged_date': 'ChannelAcknowledgedDate',
        'merchant_acknowledged_date': 'MerchantAcknowledgedDate',
        'order_id': 'OrderId',
        'channel_id': 'ChannelId',
        'created_at': 'CreatedAt',
        'updated_at': 'UpdatedAt',
        'deleted_at': 'DeletedAt'
    }

    def __init__(self, lines=None, id=None, status=None, channel_export_status=None, reason=None, merchant_comment=None, merchant_return_no=None, channel_return_no=None, channel_order_no=None, created_by_type=None, return_date=None, order_date=None, external_batch_no=None, channel_acknowledged_date=None, merchant_acknowledged_date=None, order_id=None, channel_id=None, created_at=None, updated_at=None, deleted_at=None):  # noqa: E501
        """IReturn - a model defined in Swagger"""  # noqa: E501
        self._lines = None
        self._id = None
        self._status = None
        self._channel_export_status = None
        self._reason = None
        self._merchant_comment = None
        self._merchant_return_no = None
        self._channel_return_no = None
        self._channel_order_no = None
        self._created_by_type = None
        self._return_date = None
        self._order_date = None
        self._external_batch_no = None
        self._channel_acknowledged_date = None
        self._merchant_acknowledged_date = None
        self._order_id = None
        self._channel_id = None
        self._created_at = None
        self._updated_at = None
        self._deleted_at = None
        self.discriminator = None
        if lines is not None:
            self.lines = lines
        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if channel_export_status is not None:
            self.channel_export_status = channel_export_status
        if reason is not None:
            self.reason = reason
        if merchant_comment is not None:
            self.merchant_comment = merchant_comment
        if merchant_return_no is not None:
            self.merchant_return_no = merchant_return_no
        if channel_return_no is not None:
            self.channel_return_no = channel_return_no
        if channel_order_no is not None:
            self.channel_order_no = channel_order_no
        if created_by_type is not None:
            self.created_by_type = created_by_type
        if return_date is not None:
            self.return_date = return_date
        if order_date is not None:
            self.order_date = order_date
        if external_batch_no is not None:
            self.external_batch_no = external_batch_no
        if channel_acknowledged_date is not None:
            self.channel_acknowledged_date = channel_acknowledged_date
        if merchant_acknowledged_date is not None:
            self.merchant_acknowledged_date = merchant_acknowledged_date
        if order_id is not None:
            self.order_id = order_id
        if channel_id is not None:
            self.channel_id = channel_id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if deleted_at is not None:
            self.deleted_at = deleted_at

    @property
    def lines(self):
        """Gets the lines of this IReturn.  # noqa: E501


        :return: The lines of this IReturn.  # noqa: E501
        :rtype: list[IReturnLine]
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """Sets the lines of this IReturn.


        :param lines: The lines of this IReturn.  # noqa: E501
        :type: list[IReturnLine]
        """

        self._lines = lines

    @property
    def id(self):
        """Gets the id of this IReturn.  # noqa: E501


        :return: The id of this IReturn.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IReturn.


        :param id: The id of this IReturn.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this IReturn.  # noqa: E501


        :return: The status of this IReturn.  # noqa: E501
        :rtype: ModuleReturnStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this IReturn.


        :param status: The status of this IReturn.  # noqa: E501
        :type: ModuleReturnStatus
        """

        self._status = status

    @property
    def channel_export_status(self):
        """Gets the channel_export_status of this IReturn.  # noqa: E501


        :return: The channel_export_status of this IReturn.  # noqa: E501
        :rtype: ChannelExportStatus
        """
        return self._channel_export_status

    @channel_export_status.setter
    def channel_export_status(self, channel_export_status):
        """Sets the channel_export_status of this IReturn.


        :param channel_export_status: The channel_export_status of this IReturn.  # noqa: E501
        :type: ChannelExportStatus
        """

        self._channel_export_status = channel_export_status

    @property
    def reason(self):
        """Gets the reason of this IReturn.  # noqa: E501


        :return: The reason of this IReturn.  # noqa: E501
        :rtype: ModuleReturnReason
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this IReturn.


        :param reason: The reason of this IReturn.  # noqa: E501
        :type: ModuleReturnReason
        """

        self._reason = reason

    @property
    def merchant_comment(self):
        """Gets the merchant_comment of this IReturn.  # noqa: E501


        :return: The merchant_comment of this IReturn.  # noqa: E501
        :rtype: str
        """
        return self._merchant_comment

    @merchant_comment.setter
    def merchant_comment(self, merchant_comment):
        """Sets the merchant_comment of this IReturn.


        :param merchant_comment: The merchant_comment of this IReturn.  # noqa: E501
        :type: str
        """

        self._merchant_comment = merchant_comment

    @property
    def merchant_return_no(self):
        """Gets the merchant_return_no of this IReturn.  # noqa: E501


        :return: The merchant_return_no of this IReturn.  # noqa: E501
        :rtype: str
        """
        return self._merchant_return_no

    @merchant_return_no.setter
    def merchant_return_no(self, merchant_return_no):
        """Sets the merchant_return_no of this IReturn.


        :param merchant_return_no: The merchant_return_no of this IReturn.  # noqa: E501
        :type: str
        """

        self._merchant_return_no = merchant_return_no

    @property
    def channel_return_no(self):
        """Gets the channel_return_no of this IReturn.  # noqa: E501


        :return: The channel_return_no of this IReturn.  # noqa: E501
        :rtype: str
        """
        return self._channel_return_no

    @channel_return_no.setter
    def channel_return_no(self, channel_return_no):
        """Sets the channel_return_no of this IReturn.


        :param channel_return_no: The channel_return_no of this IReturn.  # noqa: E501
        :type: str
        """

        self._channel_return_no = channel_return_no

    @property
    def channel_order_no(self):
        """Gets the channel_order_no of this IReturn.  # noqa: E501


        :return: The channel_order_no of this IReturn.  # noqa: E501
        :rtype: str
        """
        return self._channel_order_no

    @channel_order_no.setter
    def channel_order_no(self, channel_order_no):
        """Sets the channel_order_no of this IReturn.


        :param channel_order_no: The channel_order_no of this IReturn.  # noqa: E501
        :type: str
        """

        self._channel_order_no = channel_order_no

    @property
    def created_by_type(self):
        """Gets the created_by_type of this IReturn.  # noqa: E501


        :return: The created_by_type of this IReturn.  # noqa: E501
        :rtype: CreatedByType
        """
        return self._created_by_type

    @created_by_type.setter
    def created_by_type(self, created_by_type):
        """Sets the created_by_type of this IReturn.


        :param created_by_type: The created_by_type of this IReturn.  # noqa: E501
        :type: CreatedByType
        """

        self._created_by_type = created_by_type

    @property
    def return_date(self):
        """Gets the return_date of this IReturn.  # noqa: E501


        :return: The return_date of this IReturn.  # noqa: E501
        :rtype: datetime
        """
        return self._return_date

    @return_date.setter
    def return_date(self, return_date):
        """Sets the return_date of this IReturn.


        :param return_date: The return_date of this IReturn.  # noqa: E501
        :type: datetime
        """

        self._return_date = return_date

    @property
    def order_date(self):
        """Gets the order_date of this IReturn.  # noqa: E501


        :return: The order_date of this IReturn.  # noqa: E501
        :rtype: datetime
        """
        return self._order_date

    @order_date.setter
    def order_date(self, order_date):
        """Sets the order_date of this IReturn.


        :param order_date: The order_date of this IReturn.  # noqa: E501
        :type: datetime
        """

        self._order_date = order_date

    @property
    def external_batch_no(self):
        """Gets the external_batch_no of this IReturn.  # noqa: E501


        :return: The external_batch_no of this IReturn.  # noqa: E501
        :rtype: str
        """
        return self._external_batch_no

    @external_batch_no.setter
    def external_batch_no(self, external_batch_no):
        """Sets the external_batch_no of this IReturn.


        :param external_batch_no: The external_batch_no of this IReturn.  # noqa: E501
        :type: str
        """

        self._external_batch_no = external_batch_no

    @property
    def channel_acknowledged_date(self):
        """Gets the channel_acknowledged_date of this IReturn.  # noqa: E501


        :return: The channel_acknowledged_date of this IReturn.  # noqa: E501
        :rtype: datetime
        """
        return self._channel_acknowledged_date

    @channel_acknowledged_date.setter
    def channel_acknowledged_date(self, channel_acknowledged_date):
        """Sets the channel_acknowledged_date of this IReturn.


        :param channel_acknowledged_date: The channel_acknowledged_date of this IReturn.  # noqa: E501
        :type: datetime
        """

        self._channel_acknowledged_date = channel_acknowledged_date

    @property
    def merchant_acknowledged_date(self):
        """Gets the merchant_acknowledged_date of this IReturn.  # noqa: E501


        :return: The merchant_acknowledged_date of this IReturn.  # noqa: E501
        :rtype: datetime
        """
        return self._merchant_acknowledged_date

    @merchant_acknowledged_date.setter
    def merchant_acknowledged_date(self, merchant_acknowledged_date):
        """Sets the merchant_acknowledged_date of this IReturn.


        :param merchant_acknowledged_date: The merchant_acknowledged_date of this IReturn.  # noqa: E501
        :type: datetime
        """

        self._merchant_acknowledged_date = merchant_acknowledged_date

    @property
    def order_id(self):
        """Gets the order_id of this IReturn.  # noqa: E501


        :return: The order_id of this IReturn.  # noqa: E501
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this IReturn.


        :param order_id: The order_id of this IReturn.  # noqa: E501
        :type: int
        """

        self._order_id = order_id

    @property
    def channel_id(self):
        """Gets the channel_id of this IReturn.  # noqa: E501


        :return: The channel_id of this IReturn.  # noqa: E501
        :rtype: int
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this IReturn.


        :param channel_id: The channel_id of this IReturn.  # noqa: E501
        :type: int
        """

        self._channel_id = channel_id

    @property
    def created_at(self):
        """Gets the created_at of this IReturn.  # noqa: E501


        :return: The created_at of this IReturn.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this IReturn.


        :param created_at: The created_at of this IReturn.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this IReturn.  # noqa: E501


        :return: The updated_at of this IReturn.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this IReturn.


        :param updated_at: The updated_at of this IReturn.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this IReturn.  # noqa: E501


        :return: The deleted_at of this IReturn.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this IReturn.


        :param deleted_at: The deleted_at of this IReturn.  # noqa: E501
        :type: datetime
        """

        self._deleted_at = deleted_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IReturn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IReturn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
