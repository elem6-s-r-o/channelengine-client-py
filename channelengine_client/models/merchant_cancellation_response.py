# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants  # noqa: E501

    OpenAPI spec version: 2.17.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MerchantCancellationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'merchant_cancellation_no': 'str',
        'merchant_order_no': 'str',
        'channel_order_no': 'str',
        'lines': 'list[MerchantCancellationLineResponse]',
        'created_at': 'datetime',
        'reason': 'str',
        'reason_code': 'MancoReason'
    }

    attribute_map = {
        'id': 'Id',
        'merchant_cancellation_no': 'MerchantCancellationNo',
        'merchant_order_no': 'MerchantOrderNo',
        'channel_order_no': 'ChannelOrderNo',
        'lines': 'Lines',
        'created_at': 'CreatedAt',
        'reason': 'Reason',
        'reason_code': 'ReasonCode'
    }

    def __init__(self, id=None, merchant_cancellation_no=None, merchant_order_no=None, channel_order_no=None, lines=None, created_at=None, reason=None, reason_code=None):  # noqa: E501
        """MerchantCancellationResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._merchant_cancellation_no = None
        self._merchant_order_no = None
        self._channel_order_no = None
        self._lines = None
        self._created_at = None
        self._reason = None
        self._reason_code = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.merchant_cancellation_no = merchant_cancellation_no
        self.merchant_order_no = merchant_order_no
        if channel_order_no is not None:
            self.channel_order_no = channel_order_no
        self.lines = lines
        if created_at is not None:
            self.created_at = created_at
        if reason is not None:
            self.reason = reason
        if reason_code is not None:
            self.reason_code = reason_code

    @property
    def id(self):
        """Gets the id of this MerchantCancellationResponse.  # noqa: E501

        The unique cancellation identifier used by ChannelEngine.  # noqa: E501

        :return: The id of this MerchantCancellationResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MerchantCancellationResponse.

        The unique cancellation identifier used by ChannelEngine.  # noqa: E501

        :param id: The id of this MerchantCancellationResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def merchant_cancellation_no(self):
        """Gets the merchant_cancellation_no of this MerchantCancellationResponse.  # noqa: E501

        The unique cancellation reference used by the Merchant (sku).  # noqa: E501

        :return: The merchant_cancellation_no of this MerchantCancellationResponse.  # noqa: E501
        :rtype: str
        """
        return self._merchant_cancellation_no

    @merchant_cancellation_no.setter
    def merchant_cancellation_no(self, merchant_cancellation_no):
        """Sets the merchant_cancellation_no of this MerchantCancellationResponse.

        The unique cancellation reference used by the Merchant (sku).  # noqa: E501

        :param merchant_cancellation_no: The merchant_cancellation_no of this MerchantCancellationResponse.  # noqa: E501
        :type: str
        """
        if merchant_cancellation_no is None:
            raise ValueError("Invalid value for `merchant_cancellation_no`, must not be `None`")  # noqa: E501

        self._merchant_cancellation_no = merchant_cancellation_no

    @property
    def merchant_order_no(self):
        """Gets the merchant_order_no of this MerchantCancellationResponse.  # noqa: E501

        The unique order reference used by the Merchant.  # noqa: E501

        :return: The merchant_order_no of this MerchantCancellationResponse.  # noqa: E501
        :rtype: str
        """
        return self._merchant_order_no

    @merchant_order_no.setter
    def merchant_order_no(self, merchant_order_no):
        """Sets the merchant_order_no of this MerchantCancellationResponse.

        The unique order reference used by the Merchant.  # noqa: E501

        :param merchant_order_no: The merchant_order_no of this MerchantCancellationResponse.  # noqa: E501
        :type: str
        """
        if merchant_order_no is None:
            raise ValueError("Invalid value for `merchant_order_no`, must not be `None`")  # noqa: E501

        self._merchant_order_no = merchant_order_no

    @property
    def channel_order_no(self):
        """Gets the channel_order_no of this MerchantCancellationResponse.  # noqa: E501

        The unique order reference used by the Channel.  # noqa: E501

        :return: The channel_order_no of this MerchantCancellationResponse.  # noqa: E501
        :rtype: str
        """
        return self._channel_order_no

    @channel_order_no.setter
    def channel_order_no(self, channel_order_no):
        """Sets the channel_order_no of this MerchantCancellationResponse.

        The unique order reference used by the Channel.  # noqa: E501

        :param channel_order_no: The channel_order_no of this MerchantCancellationResponse.  # noqa: E501
        :type: str
        """

        self._channel_order_no = channel_order_no

    @property
    def lines(self):
        """Gets the lines of this MerchantCancellationResponse.  # noqa: E501


        :return: The lines of this MerchantCancellationResponse.  # noqa: E501
        :rtype: list[MerchantCancellationLineResponse]
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """Sets the lines of this MerchantCancellationResponse.


        :param lines: The lines of this MerchantCancellationResponse.  # noqa: E501
        :type: list[MerchantCancellationLineResponse]
        """
        if lines is None:
            raise ValueError("Invalid value for `lines`, must not be `None`")  # noqa: E501

        self._lines = lines

    @property
    def created_at(self):
        """Gets the created_at of this MerchantCancellationResponse.  # noqa: E501

        The date at which the cancellation was created in ChannelEngine.  # noqa: E501

        :return: The created_at of this MerchantCancellationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MerchantCancellationResponse.

        The date at which the cancellation was created in ChannelEngine.  # noqa: E501

        :param created_at: The created_at of this MerchantCancellationResponse.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def reason(self):
        """Gets the reason of this MerchantCancellationResponse.  # noqa: E501

        Reason for cancellation (text).  # noqa: E501

        :return: The reason of this MerchantCancellationResponse.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this MerchantCancellationResponse.

        Reason for cancellation (text).  # noqa: E501

        :param reason: The reason of this MerchantCancellationResponse.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def reason_code(self):
        """Gets the reason_code of this MerchantCancellationResponse.  # noqa: E501


        :return: The reason_code of this MerchantCancellationResponse.  # noqa: E501
        :rtype: MancoReason
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this MerchantCancellationResponse.


        :param reason_code: The reason_code of this MerchantCancellationResponse.  # noqa: E501
        :type: MancoReason
        """

        self._reason_code = reason_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MerchantCancellationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MerchantCancellationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
