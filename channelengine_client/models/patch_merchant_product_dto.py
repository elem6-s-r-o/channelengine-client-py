# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants  # noqa: E501

    OpenAPI spec version: 2.17.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PatchMerchantProductDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'properties_to_update': 'list[str]',
        'merchant_product_request_models': 'list[MerchantProductRequest]'
    }

    attribute_map = {
        'properties_to_update': 'PropertiesToUpdate',
        'merchant_product_request_models': 'MerchantProductRequestModels'
    }

    def __init__(self, properties_to_update=None, merchant_product_request_models=None):  # noqa: E501
        """PatchMerchantProductDto - a model defined in Swagger"""  # noqa: E501
        self._properties_to_update = None
        self._merchant_product_request_models = None
        self.discriminator = None
        if properties_to_update is not None:
            self.properties_to_update = properties_to_update
        if merchant_product_request_models is not None:
            self.merchant_product_request_models = merchant_product_request_models

    @property
    def properties_to_update(self):
        """Gets the properties_to_update of this PatchMerchantProductDto.  # noqa: E501

        Fields to update  # noqa: E501

        :return: The properties_to_update of this PatchMerchantProductDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._properties_to_update

    @properties_to_update.setter
    def properties_to_update(self, properties_to_update):
        """Sets the properties_to_update of this PatchMerchantProductDto.

        Fields to update  # noqa: E501

        :param properties_to_update: The properties_to_update of this PatchMerchantProductDto.  # noqa: E501
        :type: list[str]
        """

        self._properties_to_update = properties_to_update

    @property
    def merchant_product_request_models(self):
        """Gets the merchant_product_request_models of this PatchMerchantProductDto.  # noqa: E501

        Products to be updated  # noqa: E501

        :return: The merchant_product_request_models of this PatchMerchantProductDto.  # noqa: E501
        :rtype: list[MerchantProductRequest]
        """
        return self._merchant_product_request_models

    @merchant_product_request_models.setter
    def merchant_product_request_models(self, merchant_product_request_models):
        """Sets the merchant_product_request_models of this PatchMerchantProductDto.

        Products to be updated  # noqa: E501

        :param merchant_product_request_models: The merchant_product_request_models of this PatchMerchantProductDto.  # noqa: E501
        :type: list[MerchantProductRequest]
        """

        self._merchant_product_request_models = merchant_product_request_models

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PatchMerchantProductDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PatchMerchantProductDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
