# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants  # noqa: E501

    OpenAPI spec version: 2.17.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MerchantSettlementReportsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'settlement_id': 'int',
        'channel_settlement_no': 'str',
        'channel_id': 'int',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'current_reserve_amount': 'float',
        'previous_reserve_amount': 'float',
        'payment_amount': 'float'
    }

    attribute_map = {
        'settlement_id': 'SettlementId',
        'channel_settlement_no': 'ChannelSettlementNo',
        'channel_id': 'ChannelId',
        'start_date': 'StartDate',
        'end_date': 'EndDate',
        'created_at': 'CreatedAt',
        'updated_at': 'UpdatedAt',
        'current_reserve_amount': 'CurrentReserveAmount',
        'previous_reserve_amount': 'PreviousReserveAmount',
        'payment_amount': 'PaymentAmount'
    }

    def __init__(self, settlement_id=None, channel_settlement_no=None, channel_id=None, start_date=None, end_date=None, created_at=None, updated_at=None, current_reserve_amount=None, previous_reserve_amount=None, payment_amount=None):  # noqa: E501
        """MerchantSettlementReportsResponse - a model defined in Swagger"""  # noqa: E501
        self._settlement_id = None
        self._channel_settlement_no = None
        self._channel_id = None
        self._start_date = None
        self._end_date = None
        self._created_at = None
        self._updated_at = None
        self._current_reserve_amount = None
        self._previous_reserve_amount = None
        self._payment_amount = None
        self.discriminator = None
        if settlement_id is not None:
            self.settlement_id = settlement_id
        if channel_settlement_no is not None:
            self.channel_settlement_no = channel_settlement_no
        if channel_id is not None:
            self.channel_id = channel_id
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if current_reserve_amount is not None:
            self.current_reserve_amount = current_reserve_amount
        if previous_reserve_amount is not None:
            self.previous_reserve_amount = previous_reserve_amount
        if payment_amount is not None:
            self.payment_amount = payment_amount

    @property
    def settlement_id(self):
        """Gets the settlement_id of this MerchantSettlementReportsResponse.  # noqa: E501


        :return: The settlement_id of this MerchantSettlementReportsResponse.  # noqa: E501
        :rtype: int
        """
        return self._settlement_id

    @settlement_id.setter
    def settlement_id(self, settlement_id):
        """Sets the settlement_id of this MerchantSettlementReportsResponse.


        :param settlement_id: The settlement_id of this MerchantSettlementReportsResponse.  # noqa: E501
        :type: int
        """

        self._settlement_id = settlement_id

    @property
    def channel_settlement_no(self):
        """Gets the channel_settlement_no of this MerchantSettlementReportsResponse.  # noqa: E501


        :return: The channel_settlement_no of this MerchantSettlementReportsResponse.  # noqa: E501
        :rtype: str
        """
        return self._channel_settlement_no

    @channel_settlement_no.setter
    def channel_settlement_no(self, channel_settlement_no):
        """Sets the channel_settlement_no of this MerchantSettlementReportsResponse.


        :param channel_settlement_no: The channel_settlement_no of this MerchantSettlementReportsResponse.  # noqa: E501
        :type: str
        """

        self._channel_settlement_no = channel_settlement_no

    @property
    def channel_id(self):
        """Gets the channel_id of this MerchantSettlementReportsResponse.  # noqa: E501


        :return: The channel_id of this MerchantSettlementReportsResponse.  # noqa: E501
        :rtype: int
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this MerchantSettlementReportsResponse.


        :param channel_id: The channel_id of this MerchantSettlementReportsResponse.  # noqa: E501
        :type: int
        """

        self._channel_id = channel_id

    @property
    def start_date(self):
        """Gets the start_date of this MerchantSettlementReportsResponse.  # noqa: E501


        :return: The start_date of this MerchantSettlementReportsResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this MerchantSettlementReportsResponse.


        :param start_date: The start_date of this MerchantSettlementReportsResponse.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this MerchantSettlementReportsResponse.  # noqa: E501


        :return: The end_date of this MerchantSettlementReportsResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this MerchantSettlementReportsResponse.


        :param end_date: The end_date of this MerchantSettlementReportsResponse.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def created_at(self):
        """Gets the created_at of this MerchantSettlementReportsResponse.  # noqa: E501


        :return: The created_at of this MerchantSettlementReportsResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MerchantSettlementReportsResponse.


        :param created_at: The created_at of this MerchantSettlementReportsResponse.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this MerchantSettlementReportsResponse.  # noqa: E501


        :return: The updated_at of this MerchantSettlementReportsResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MerchantSettlementReportsResponse.


        :param updated_at: The updated_at of this MerchantSettlementReportsResponse.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def current_reserve_amount(self):
        """Gets the current_reserve_amount of this MerchantSettlementReportsResponse.  # noqa: E501


        :return: The current_reserve_amount of this MerchantSettlementReportsResponse.  # noqa: E501
        :rtype: float
        """
        return self._current_reserve_amount

    @current_reserve_amount.setter
    def current_reserve_amount(self, current_reserve_amount):
        """Sets the current_reserve_amount of this MerchantSettlementReportsResponse.


        :param current_reserve_amount: The current_reserve_amount of this MerchantSettlementReportsResponse.  # noqa: E501
        :type: float
        """

        self._current_reserve_amount = current_reserve_amount

    @property
    def previous_reserve_amount(self):
        """Gets the previous_reserve_amount of this MerchantSettlementReportsResponse.  # noqa: E501


        :return: The previous_reserve_amount of this MerchantSettlementReportsResponse.  # noqa: E501
        :rtype: float
        """
        return self._previous_reserve_amount

    @previous_reserve_amount.setter
    def previous_reserve_amount(self, previous_reserve_amount):
        """Sets the previous_reserve_amount of this MerchantSettlementReportsResponse.


        :param previous_reserve_amount: The previous_reserve_amount of this MerchantSettlementReportsResponse.  # noqa: E501
        :type: float
        """

        self._previous_reserve_amount = previous_reserve_amount

    @property
    def payment_amount(self):
        """Gets the payment_amount of this MerchantSettlementReportsResponse.  # noqa: E501


        :return: The payment_amount of this MerchantSettlementReportsResponse.  # noqa: E501
        :rtype: float
        """
        return self._payment_amount

    @payment_amount.setter
    def payment_amount(self, payment_amount):
        """Sets the payment_amount of this MerchantSettlementReportsResponse.


        :param payment_amount: The payment_amount of this MerchantSettlementReportsResponse.  # noqa: E501
        :type: float
        """

        self._payment_amount = payment_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MerchantSettlementReportsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MerchantSettlementReportsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
